// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rtn.DepthMarketData.proto

#include "Rtn.DepthMarketData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rtn {
class DepthMarketDataFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthMarketDataField> _instance;
} _DepthMarketDataField_default_instance_;
}  // namespace rtn
static void InitDefaultsscc_info_DepthMarketDataField_Rtn_2eDepthMarketData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rtn::_DepthMarketDataField_default_instance_;
    new (ptr) ::rtn::DepthMarketDataField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rtn::DepthMarketDataField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthMarketDataField_Rtn_2eDepthMarketData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepthMarketDataField_Rtn_2eDepthMarketData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Rtn_2eDepthMarketData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Rtn_2eDepthMarketData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Rtn_2eDepthMarketData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Rtn_2eDepthMarketData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, trading_day_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, last_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, pre_close_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, pre_open_interest_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, open_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, highest_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, volume_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, turn_over_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, open_interest_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, close_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, upper_limit_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, lower_limit_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, update_time_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, update_millisec_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, average_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, action_day_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, bid_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, bid_volume_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, ask_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::DepthMarketDataField, ask_volume_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rtn::DepthMarketDataField)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rtn::_DepthMarketDataField_default_instance_),
};

const char descriptor_table_protodef_Rtn_2eDepthMarketData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031Rtn.DepthMarketData.proto\022\003rtn\"\304\004\n\024Dep"
  "thMarketDataField\022\023\n\013trading_day\030\001 \001(\t\022\025"
  "\n\rinstrument_id\030\002 \001(\t\022\023\n\013exchange_id\030\003 \001"
  "(\t\022\022\n\nlast_price\030\004 \001(\001\022\034\n\024pre_settlement"
  "_price\030\005 \001(\001\022\027\n\017pre_close_price\030\006 \001(\001\022\031\n"
  "\021pre_open_interest\030\007 \001(\005\022\022\n\nopen_price\030\010"
  " \001(\001\022\025\n\rhighest_price\030\t \001(\001\022\024\n\014lowest_pr"
  "ice\030\n \001(\001\022\016\n\006volume\030\013 \001(\005\022\021\n\tturn_over\030\014"
  " \001(\001\022\025\n\ropen_interest\030\r \001(\005\022\023\n\013close_pri"
  "ce\030\016 \001(\001\022\030\n\020settlement_price\030\017 \001(\001\022\031\n\021up"
  "per_limit_price\030\020 \001(\001\022\031\n\021lower_limit_pri"
  "ce\030\021 \001(\001\022\023\n\013update_time\030\022 \001(\t\022\027\n\017update_"
  "millisec\030\023 \001(\005\022\025\n\raverage_price\030\024 \001(\001\022\022\n"
  "\naction_day\030\025 \001(\t\022\021\n\tbid_price\030\026 \001(\001\022\022\n\n"
  "bid_volume\030\027 \001(\005\022\021\n\task_price\030\030 \001(\001\022\022\n\na"
  "sk_volume\030\031 \001(\005BG\n\025io.evelynn.base.proto"
  "B\031DepthMarketDataFieldProto\252\002\022Evelynn.Ba"
  "se.Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Rtn_2eDepthMarketData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Rtn_2eDepthMarketData_2eproto_sccs[1] = {
  &scc_info_DepthMarketDataField_Rtn_2eDepthMarketData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Rtn_2eDepthMarketData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rtn_2eDepthMarketData_2eproto = {
  false, false, descriptor_table_protodef_Rtn_2eDepthMarketData_2eproto, "Rtn.DepthMarketData.proto", 696,
  &descriptor_table_Rtn_2eDepthMarketData_2eproto_once, descriptor_table_Rtn_2eDepthMarketData_2eproto_sccs, descriptor_table_Rtn_2eDepthMarketData_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_Rtn_2eDepthMarketData_2eproto::offsets,
  file_level_metadata_Rtn_2eDepthMarketData_2eproto, 1, file_level_enum_descriptors_Rtn_2eDepthMarketData_2eproto, file_level_service_descriptors_Rtn_2eDepthMarketData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Rtn_2eDepthMarketData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Rtn_2eDepthMarketData_2eproto)), true);
namespace rtn {

// ===================================================================

void DepthMarketDataField::InitAsDefaultInstance() {
}
class DepthMarketDataField::_Internal {
 public:
};

DepthMarketDataField::DepthMarketDataField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rtn.DepthMarketDataField)
}
DepthMarketDataField::DepthMarketDataField(const DepthMarketDataField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trading_day(),
      GetArena());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_update_time().empty()) {
    update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_update_time(),
      GetArena());
  }
  action_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_day().empty()) {
    action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_day(),
      GetArena());
  }
  ::memcpy(&last_price_, &from.last_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_volume_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(ask_volume_));
  // @@protoc_insertion_point(copy_constructor:rtn.DepthMarketDataField)
}

void DepthMarketDataField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepthMarketDataField_Rtn_2eDepthMarketData_2eproto.base);
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_volume_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(ask_volume_));
}

DepthMarketDataField::~DepthMarketDataField() {
  // @@protoc_insertion_point(destructor:rtn.DepthMarketDataField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepthMarketDataField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trading_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepthMarketDataField::ArenaDtor(void* object) {
  DepthMarketDataField* _this = reinterpret_cast< DepthMarketDataField* >(object);
  (void)_this;
}
void DepthMarketDataField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepthMarketDataField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthMarketDataField& DepthMarketDataField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthMarketDataField_Rtn_2eDepthMarketData_2eproto.base);
  return *internal_default_instance();
}


void DepthMarketDataField::Clear() {
// @@protoc_insertion_point(message_clear_start:rtn.DepthMarketDataField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_volume_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(ask_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepthMarketDataField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string trading_day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.DepthMarketDataField.trading_day"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.DepthMarketDataField.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.DepthMarketDataField.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double last_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          last_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_settlement_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_close_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          pre_close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 pre_open_interest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pre_open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          open_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double highest_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lowest_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turn_over = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          turn_over_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 open_interest = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double close_price = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double settlement_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double upper_limit_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          upper_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit_price = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          lower_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string update_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_update_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.DepthMarketDataField.update_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 update_millisec = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          update_millisec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double average_price = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          average_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string action_day = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_action_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.DepthMarketDataField.action_day"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid_price = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bid_volume = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          bid_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ask_price = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ask_volume = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ask_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthMarketDataField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtn.DepthMarketDataField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trading_day = 1;
  if (this->trading_day().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.DepthMarketDataField.trading_day");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trading_day(), target);
  }

  // string instrument_id = 2;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.DepthMarketDataField.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  // string exchange_id = 3;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.DepthMarketDataField.exchange_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_id(), target);
  }

  // double last_price = 4;
  if (!(this->last_price() <= 0 && this->last_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_last_price(), target);
  }

  // double pre_settlement_price = 5;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pre_settlement_price(), target);
  }

  // double pre_close_price = 6;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pre_close_price(), target);
  }

  // int32 pre_open_interest = 7;
  if (this->pre_open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_pre_open_interest(), target);
  }

  // double open_price = 8;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_open_price(), target);
  }

  // double highest_price = 9;
  if (!(this->highest_price() <= 0 && this->highest_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_highest_price(), target);
  }

  // double lowest_price = 10;
  if (!(this->lowest_price() <= 0 && this->lowest_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_lowest_price(), target);
  }

  // int32 volume = 11;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_volume(), target);
  }

  // double turn_over = 12;
  if (!(this->turn_over() <= 0 && this->turn_over() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_turn_over(), target);
  }

  // int32 open_interest = 13;
  if (this->open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_open_interest(), target);
  }

  // double close_price = 14;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_close_price(), target);
  }

  // double settlement_price = 15;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_settlement_price(), target);
  }

  // double upper_limit_price = 16;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_upper_limit_price(), target);
  }

  // double lower_limit_price = 17;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_lower_limit_price(), target);
  }

  // string update_time = 18;
  if (this->update_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.DepthMarketDataField.update_time");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_update_time(), target);
  }

  // int32 update_millisec = 19;
  if (this->update_millisec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_update_millisec(), target);
  }

  // double average_price = 20;
  if (!(this->average_price() <= 0 && this->average_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_average_price(), target);
  }

  // string action_day = 21;
  if (this->action_day().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_day().data(), static_cast<int>(this->_internal_action_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.DepthMarketDataField.action_day");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_action_day(), target);
  }

  // double bid_price = 22;
  if (!(this->bid_price() <= 0 && this->bid_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_bid_price(), target);
  }

  // int32 bid_volume = 23;
  if (this->bid_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_bid_volume(), target);
  }

  // double ask_price = 24;
  if (!(this->ask_price() <= 0 && this->ask_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_ask_price(), target);
  }

  // int32 ask_volume = 25;
  if (this->ask_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_ask_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtn.DepthMarketDataField)
  return target;
}

size_t DepthMarketDataField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtn.DepthMarketDataField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trading_day = 1;
  if (this->trading_day().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string instrument_id = 2;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string exchange_id = 3;
  if (this->exchange_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string update_time = 18;
  if (this->update_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // string action_day = 21;
  if (this->action_day().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_day());
  }

  // double last_price = 4;
  if (!(this->last_price() <= 0 && this->last_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_settlement_price = 5;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_close_price = 6;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double open_price = 8;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double highest_price = 9;
  if (!(this->highest_price() <= 0 && this->highest_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 pre_open_interest = 7;
  if (this->pre_open_interest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pre_open_interest());
  }

  // int32 volume = 11;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume());
  }

  // double lowest_price = 10;
  if (!(this->lowest_price() <= 0 && this->lowest_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double turn_over = 12;
  if (!(this->turn_over() <= 0 && this->turn_over() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_price = 14;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double settlement_price = 15;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double upper_limit_price = 16;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 open_interest = 13;
  if (this->open_interest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_open_interest());
  }

  // int32 update_millisec = 19;
  if (this->update_millisec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_update_millisec());
  }

  // double lower_limit_price = 17;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double average_price = 20;
  if (!(this->average_price() <= 0 && this->average_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double bid_price = 22;
  if (!(this->bid_price() <= 0 && this->bid_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double ask_price = 24;
  if (!(this->ask_price() <= 0 && this->ask_price() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 bid_volume = 23;
  if (this->bid_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume());
  }

  // int32 ask_volume = 25;
  if (this->ask_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthMarketDataField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rtn.DepthMarketDataField)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthMarketDataField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthMarketDataField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rtn.DepthMarketDataField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rtn.DepthMarketDataField)
    MergeFrom(*source);
  }
}

void DepthMarketDataField::MergeFrom(const DepthMarketDataField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rtn.DepthMarketDataField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trading_day().size() > 0) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.update_time().size() > 0) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (from.action_day().size() > 0) {
    _internal_set_action_day(from._internal_action_day());
  }
  if (!(from.last_price() <= 0 && from.last_price() >= 0)) {
    _internal_set_last_price(from._internal_last_price());
  }
  if (!(from.pre_settlement_price() <= 0 && from.pre_settlement_price() >= 0)) {
    _internal_set_pre_settlement_price(from._internal_pre_settlement_price());
  }
  if (!(from.pre_close_price() <= 0 && from.pre_close_price() >= 0)) {
    _internal_set_pre_close_price(from._internal_pre_close_price());
  }
  if (!(from.open_price() <= 0 && from.open_price() >= 0)) {
    _internal_set_open_price(from._internal_open_price());
  }
  if (!(from.highest_price() <= 0 && from.highest_price() >= 0)) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  if (from.pre_open_interest() != 0) {
    _internal_set_pre_open_interest(from._internal_pre_open_interest());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.lowest_price() <= 0 && from.lowest_price() >= 0)) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  if (!(from.turn_over() <= 0 && from.turn_over() >= 0)) {
    _internal_set_turn_over(from._internal_turn_over());
  }
  if (!(from.close_price() <= 0 && from.close_price() >= 0)) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (!(from.settlement_price() <= 0 && from.settlement_price() >= 0)) {
    _internal_set_settlement_price(from._internal_settlement_price());
  }
  if (!(from.upper_limit_price() <= 0 && from.upper_limit_price() >= 0)) {
    _internal_set_upper_limit_price(from._internal_upper_limit_price());
  }
  if (from.open_interest() != 0) {
    _internal_set_open_interest(from._internal_open_interest());
  }
  if (from.update_millisec() != 0) {
    _internal_set_update_millisec(from._internal_update_millisec());
  }
  if (!(from.lower_limit_price() <= 0 && from.lower_limit_price() >= 0)) {
    _internal_set_lower_limit_price(from._internal_lower_limit_price());
  }
  if (!(from.average_price() <= 0 && from.average_price() >= 0)) {
    _internal_set_average_price(from._internal_average_price());
  }
  if (!(from.bid_price() <= 0 && from.bid_price() >= 0)) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (!(from.ask_price() <= 0 && from.ask_price() >= 0)) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from.bid_volume() != 0) {
    _internal_set_bid_volume(from._internal_bid_volume());
  }
  if (from.ask_volume() != 0) {
    _internal_set_ask_volume(from._internal_ask_volume());
  }
}

void DepthMarketDataField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rtn.DepthMarketDataField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthMarketDataField::CopyFrom(const DepthMarketDataField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtn.DepthMarketDataField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthMarketDataField::IsInitialized() const {
  return true;
}

void DepthMarketDataField::InternalSwap(DepthMarketDataField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trading_day_.Swap(&other->trading_day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_time_.Swap(&other->update_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_day_.Swap(&other->action_day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepthMarketDataField, ask_volume_)
      + sizeof(DepthMarketDataField::ask_volume_)
      - PROTOBUF_FIELD_OFFSET(DepthMarketDataField, last_price_)>(
          reinterpret_cast<char*>(&last_price_),
          reinterpret_cast<char*>(&other->last_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthMarketDataField::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rtn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rtn::DepthMarketDataField* Arena::CreateMaybeMessage< ::rtn::DepthMarketDataField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtn::DepthMarketDataField >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rsp.UserLogin.proto

#include "Rsp.UserLogin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rsp {
class UserLoginFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLoginField> _instance;
} _UserLoginField_default_instance_;
}  // namespace rsp
static void InitDefaultsscc_info_UserLoginField_Rsp_2eUserLogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rsp::_UserLoginField_default_instance_;
    new (ptr) ::rsp::UserLoginField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsp::UserLoginField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserLoginField_Rsp_2eUserLogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserLoginField_Rsp_2eUserLogin_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Rsp_2eUserLogin_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Rsp_2eUserLogin_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Rsp_2eUserLogin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Rsp_2eUserLogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, trading_day_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, login_time_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, broker_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, user_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, system_name_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, front_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, session_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, max_order_ref_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, shfe_time_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, dce_time_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, czce_time_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, ffex_time_),
  PROTOBUF_FIELD_OFFSET(::rsp::UserLoginField, ine_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rsp::UserLoginField)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rsp::_UserLoginField_default_instance_),
};

const char descriptor_table_protodef_Rsp_2eUserLogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Rsp.UserLogin.proto\022\003rsp\"\214\002\n\016UserLogin"
  "Field\022\023\n\013trading_day\030\001 \001(\t\022\022\n\nlogin_time"
  "\030\002 \001(\t\022\021\n\tbroker_id\030\003 \001(\t\022\017\n\007user_id\030\004 \001"
  "(\t\022\023\n\013system_name\030\005 \001(\t\022\020\n\010front_id\030\006 \001("
  "\005\022\022\n\nsession_id\030\007 \001(\005\022\025\n\rmax_order_ref\030\010"
  " \001(\t\022\021\n\tshfe_time\030\t \001(\t\022\020\n\010dce_time\030\n \001("
  "\t\022\021\n\tczce_time\030\013 \001(\t\022\021\n\tffex_time\030\014 \001(\t\022"
  "\020\n\010ine_time\030\r \001(\tBD\n\025io.evelynn.base.pro"
  "toB\026RspUserLoginFieldProto\252\002\022Evelynn.Bas"
  "e.Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Rsp_2eUserLogin_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Rsp_2eUserLogin_2eproto_sccs[1] = {
  &scc_info_UserLoginField_Rsp_2eUserLogin_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Rsp_2eUserLogin_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rsp_2eUserLogin_2eproto = {
  false, false, descriptor_table_protodef_Rsp_2eUserLogin_2eproto, "Rsp.UserLogin.proto", 375,
  &descriptor_table_Rsp_2eUserLogin_2eproto_once, descriptor_table_Rsp_2eUserLogin_2eproto_sccs, descriptor_table_Rsp_2eUserLogin_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_Rsp_2eUserLogin_2eproto::offsets,
  file_level_metadata_Rsp_2eUserLogin_2eproto, 1, file_level_enum_descriptors_Rsp_2eUserLogin_2eproto, file_level_service_descriptors_Rsp_2eUserLogin_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Rsp_2eUserLogin_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Rsp_2eUserLogin_2eproto)), true);
namespace rsp {

// ===================================================================

void UserLoginField::InitAsDefaultInstance() {
}
class UserLoginField::_Internal {
 public:
};

UserLoginField::UserLoginField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rsp.UserLoginField)
}
UserLoginField::UserLoginField(const UserLoginField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trading_day(),
      GetArena());
  }
  login_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_login_time().empty()) {
    login_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_login_time(),
      GetArena());
  }
  broker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_broker_id().empty()) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_broker_id(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  system_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system_name().empty()) {
    system_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_system_name(),
      GetArena());
  }
  max_order_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_order_ref().empty()) {
    max_order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_max_order_ref(),
      GetArena());
  }
  shfe_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shfe_time().empty()) {
    shfe_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shfe_time(),
      GetArena());
  }
  dce_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dce_time().empty()) {
    dce_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dce_time(),
      GetArena());
  }
  czce_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_czce_time().empty()) {
    czce_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_czce_time(),
      GetArena());
  }
  ffex_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ffex_time().empty()) {
    ffex_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ffex_time(),
      GetArena());
  }
  ine_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ine_time().empty()) {
    ine_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ine_time(),
      GetArena());
  }
  ::memcpy(&front_id_, &from.front_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&front_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:rsp.UserLoginField)
}

void UserLoginField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserLoginField_Rsp_2eUserLogin_2eproto.base);
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_order_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shfe_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dce_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  czce_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ffex_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ine_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(session_id_));
}

UserLoginField::~UserLoginField() {
  // @@protoc_insertion_point(destructor:rsp.UserLoginField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserLoginField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trading_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_order_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shfe_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dce_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  czce_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ffex_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ine_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserLoginField::ArenaDtor(void* object) {
  UserLoginField* _this = reinterpret_cast< UserLoginField* >(object);
  (void)_this;
}
void UserLoginField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLoginField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLoginField& UserLoginField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserLoginField_Rsp_2eUserLogin_2eproto.base);
  return *internal_default_instance();
}


void UserLoginField::Clear() {
// @@protoc_insertion_point(message_clear_start:rsp.UserLoginField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  login_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  system_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_order_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shfe_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dce_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  czce_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ffex_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ine_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string trading_day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.trading_day"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string login_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_login_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.login_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string broker_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_broker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.broker_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_system_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.system_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 front_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          front_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_order_ref = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_max_order_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.max_order_ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shfe_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_shfe_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.shfe_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dce_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_dce_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.dce_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string czce_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_czce_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.czce_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ffex_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_ffex_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.ffex_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ine_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_ine_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.UserLoginField.ine_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLoginField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsp.UserLoginField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trading_day = 1;
  if (this->trading_day().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.trading_day");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trading_day(), target);
  }

  // string login_time = 2;
  if (this->login_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_time().data(), static_cast<int>(this->_internal_login_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.login_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_login_time(), target);
  }

  // string broker_id = 3;
  if (this->broker_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_id().data(), static_cast<int>(this->_internal_broker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.broker_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_broker_id(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string system_name = 5;
  if (this->system_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system_name().data(), static_cast<int>(this->_internal_system_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.system_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_system_name(), target);
  }

  // int32 front_id = 6;
  if (this->front_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_front_id(), target);
  }

  // int32 session_id = 7;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_session_id(), target);
  }

  // string max_order_ref = 8;
  if (this->max_order_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_order_ref().data(), static_cast<int>(this->_internal_max_order_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.max_order_ref");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_max_order_ref(), target);
  }

  // string shfe_time = 9;
  if (this->shfe_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shfe_time().data(), static_cast<int>(this->_internal_shfe_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.shfe_time");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_shfe_time(), target);
  }

  // string dce_time = 10;
  if (this->dce_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dce_time().data(), static_cast<int>(this->_internal_dce_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.dce_time");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_dce_time(), target);
  }

  // string czce_time = 11;
  if (this->czce_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_czce_time().data(), static_cast<int>(this->_internal_czce_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.czce_time");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_czce_time(), target);
  }

  // string ffex_time = 12;
  if (this->ffex_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ffex_time().data(), static_cast<int>(this->_internal_ffex_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.ffex_time");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_ffex_time(), target);
  }

  // string ine_time = 13;
  if (this->ine_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ine_time().data(), static_cast<int>(this->_internal_ine_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.UserLoginField.ine_time");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_ine_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsp.UserLoginField)
  return target;
}

size_t UserLoginField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsp.UserLoginField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trading_day = 1;
  if (this->trading_day().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string login_time = 2;
  if (this->login_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login_time());
  }

  // string broker_id = 3;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_id());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string system_name = 5;
  if (this->system_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system_name());
  }

  // string max_order_ref = 8;
  if (this->max_order_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_order_ref());
  }

  // string shfe_time = 9;
  if (this->shfe_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shfe_time());
  }

  // string dce_time = 10;
  if (this->dce_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dce_time());
  }

  // string czce_time = 11;
  if (this->czce_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_czce_time());
  }

  // string ffex_time = 12;
  if (this->ffex_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ffex_time());
  }

  // string ine_time = 13;
  if (this->ine_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ine_time());
  }

  // int32 front_id = 6;
  if (this->front_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_front_id());
  }

  // int32 session_id = 7;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLoginField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsp.UserLoginField)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLoginField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserLoginField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsp.UserLoginField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsp.UserLoginField)
    MergeFrom(*source);
  }
}

void UserLoginField::MergeFrom(const UserLoginField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsp.UserLoginField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trading_day().size() > 0) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (from.login_time().size() > 0) {
    _internal_set_login_time(from._internal_login_time());
  }
  if (from.broker_id().size() > 0) {
    _internal_set_broker_id(from._internal_broker_id());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.system_name().size() > 0) {
    _internal_set_system_name(from._internal_system_name());
  }
  if (from.max_order_ref().size() > 0) {
    _internal_set_max_order_ref(from._internal_max_order_ref());
  }
  if (from.shfe_time().size() > 0) {
    _internal_set_shfe_time(from._internal_shfe_time());
  }
  if (from.dce_time().size() > 0) {
    _internal_set_dce_time(from._internal_dce_time());
  }
  if (from.czce_time().size() > 0) {
    _internal_set_czce_time(from._internal_czce_time());
  }
  if (from.ffex_time().size() > 0) {
    _internal_set_ffex_time(from._internal_ffex_time());
  }
  if (from.ine_time().size() > 0) {
    _internal_set_ine_time(from._internal_ine_time());
  }
  if (from.front_id() != 0) {
    _internal_set_front_id(from._internal_front_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
}

void UserLoginField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsp.UserLoginField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginField::CopyFrom(const UserLoginField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsp.UserLoginField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginField::IsInitialized() const {
  return true;
}

void UserLoginField::InternalSwap(UserLoginField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trading_day_.Swap(&other->trading_day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  login_time_.Swap(&other->login_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broker_id_.Swap(&other->broker_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  system_name_.Swap(&other->system_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_order_ref_.Swap(&other->max_order_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shfe_time_.Swap(&other->shfe_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dce_time_.Swap(&other->dce_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  czce_time_.Swap(&other->czce_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ffex_time_.Swap(&other->ffex_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ine_time_.Swap(&other->ine_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLoginField, session_id_)
      + sizeof(UserLoginField::session_id_)
      - PROTOBUF_FIELD_OFFSET(UserLoginField, front_id_)>(
          reinterpret_cast<char*>(&front_id_),
          reinterpret_cast<char*>(&other->front_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginField::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rsp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rsp::UserLoginField* Arena::CreateMaybeMessage< ::rsp::UserLoginField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsp::UserLoginField >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

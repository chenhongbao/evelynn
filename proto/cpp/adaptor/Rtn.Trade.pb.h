// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rtn.Trade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Rtn_2eTrade_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Rtn_2eTrade_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Rtn_2eTrade_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Rtn_2eTrade_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rtn_2eTrade_2eproto;
namespace rtn {
class TradeField;
class TradeFieldDefaultTypeInternal;
extern TradeFieldDefaultTypeInternal _TradeField_default_instance_;
}  // namespace rtn
PROTOBUF_NAMESPACE_OPEN
template<> ::rtn::TradeField* Arena::CreateMaybeMessage<::rtn::TradeField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rtn {

// ===================================================================

class TradeField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rtn.TradeField) */ {
 public:
  inline TradeField() : TradeField(nullptr) {}
  virtual ~TradeField();

  TradeField(const TradeField& from);
  TradeField(TradeField&& from) noexcept
    : TradeField() {
    *this = ::std::move(from);
  }

  inline TradeField& operator=(const TradeField& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeField& operator=(TradeField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeField* internal_default_instance() {
    return reinterpret_cast<const TradeField*>(
               &_TradeField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeField& a, TradeField& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeField* New() const final {
    return CreateMaybeMessage<TradeField>(nullptr);
  }

  TradeField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeField& from);
  void MergeFrom(const TradeField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rtn.TradeField";
  }
  protected:
  explicit TradeField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rtn_2eTrade_2eproto);
    return ::descriptor_table_Rtn_2eTrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdFieldNumber = 1,
    kInvestorIdFieldNumber = 2,
    kInstrumentIdFieldNumber = 3,
    kOrderRefFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kTradeIdFieldNumber = 6,
    kTradeDateFieldNumber = 12,
    kTradeTimeFieldNumber = 13,
    kOrderLocalIdFieldNumber = 14,
    kTradingDayFieldNumber = 15,
    kDirectionFieldNumber = 7,
    kOffsetFlagFieldNumber = 8,
    kPriceFieldNumber = 10,
    kHedgeFlagFieldNumber = 9,
    kVolumeFieldNumber = 11,
    kBrokerOrderSeqFieldNumber = 16,
  };
  // string broker_id = 1;
  void clear_broker_id();
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 2;
  void clear_investor_id();
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string instrument_id = 3;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string order_ref = 4;
  void clear_order_ref();
  const std::string& order_ref() const;
  void set_order_ref(const std::string& value);
  void set_order_ref(std::string&& value);
  void set_order_ref(const char* value);
  void set_order_ref(const char* value, size_t size);
  std::string* mutable_order_ref();
  std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);
  private:
  const std::string& _internal_order_ref() const;
  void _internal_set_order_ref(const std::string& value);
  std::string* _internal_mutable_order_ref();
  public:

  // string user_id = 5;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string trade_id = 6;
  void clear_trade_id();
  const std::string& trade_id() const;
  void set_trade_id(const std::string& value);
  void set_trade_id(std::string&& value);
  void set_trade_id(const char* value);
  void set_trade_id(const char* value, size_t size);
  std::string* mutable_trade_id();
  std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // string trade_date = 12;
  void clear_trade_date();
  const std::string& trade_date() const;
  void set_trade_date(const std::string& value);
  void set_trade_date(std::string&& value);
  void set_trade_date(const char* value);
  void set_trade_date(const char* value, size_t size);
  std::string* mutable_trade_date();
  std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);
  private:
  const std::string& _internal_trade_date() const;
  void _internal_set_trade_date(const std::string& value);
  std::string* _internal_mutable_trade_date();
  public:

  // string trade_time = 13;
  void clear_trade_time();
  const std::string& trade_time() const;
  void set_trade_time(const std::string& value);
  void set_trade_time(std::string&& value);
  void set_trade_time(const char* value);
  void set_trade_time(const char* value, size_t size);
  std::string* mutable_trade_time();
  std::string* release_trade_time();
  void set_allocated_trade_time(std::string* trade_time);
  private:
  const std::string& _internal_trade_time() const;
  void _internal_set_trade_time(const std::string& value);
  std::string* _internal_mutable_trade_time();
  public:

  // string order_local_id = 14;
  void clear_order_local_id();
  const std::string& order_local_id() const;
  void set_order_local_id(const std::string& value);
  void set_order_local_id(std::string&& value);
  void set_order_local_id(const char* value);
  void set_order_local_id(const char* value, size_t size);
  std::string* mutable_order_local_id();
  std::string* release_order_local_id();
  void set_allocated_order_local_id(std::string* order_local_id);
  private:
  const std::string& _internal_order_local_id() const;
  void _internal_set_order_local_id(const std::string& value);
  std::string* _internal_mutable_order_local_id();
  public:

  // string trading_day = 15;
  void clear_trading_day();
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // int32 direction = 7;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset_flag = 8;
  void clear_offset_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 offset_flag() const;
  void set_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset_flag() const;
  void _internal_set_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double price = 10;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 hedge_flag = 9;
  void clear_hedge_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 hedge_flag() const;
  void set_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hedge_flag() const;
  void _internal_set_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume = 11;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 broker_order_seq = 16;
  void clear_broker_order_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 broker_order_seq() const;
  void set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_broker_order_seq() const;
  void _internal_set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rtn.TradeField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_flag_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 broker_order_seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rtn_2eTrade_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeField

// string broker_id = 1;
inline void TradeField::clear_broker_id() {
  broker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::broker_id() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.broker_id)
  return _internal_broker_id();
}
inline void TradeField::set_broker_id(const std::string& value) {
  _internal_set_broker_id(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.broker_id)
}
inline std::string* TradeField::mutable_broker_id() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.broker_id)
  return _internal_mutable_broker_id();
}
inline const std::string& TradeField::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void TradeField::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_broker_id(std::string&& value) {
  
  broker_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.broker_id)
}
inline void TradeField::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.broker_id)
}
inline void TradeField::set_broker_id(const char* value,
    size_t size) {
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.broker_id)
}
inline std::string* TradeField::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_broker_id() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.broker_id)
}

// string investor_id = 2;
inline void TradeField::clear_investor_id() {
  investor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::investor_id() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.investor_id)
  return _internal_investor_id();
}
inline void TradeField::set_investor_id(const std::string& value) {
  _internal_set_investor_id(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.investor_id)
}
inline std::string* TradeField::mutable_investor_id() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.investor_id)
  return _internal_mutable_investor_id();
}
inline const std::string& TradeField::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void TradeField::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_investor_id(std::string&& value) {
  
  investor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.investor_id)
}
inline void TradeField::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.investor_id)
}
inline void TradeField::set_investor_id(const char* value,
    size_t size) {
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.investor_id)
}
inline std::string* TradeField::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_investor_id() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.investor_id)
  return investor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.investor_id)
}

// string instrument_id = 3;
inline void TradeField::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::instrument_id() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.instrument_id)
  return _internal_instrument_id();
}
inline void TradeField::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.instrument_id)
}
inline std::string* TradeField::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& TradeField::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void TradeField::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.instrument_id)
}
inline void TradeField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.instrument_id)
}
inline void TradeField::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.instrument_id)
}
inline std::string* TradeField::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.instrument_id)
}

// string order_ref = 4;
inline void TradeField::clear_order_ref() {
  order_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::order_ref() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.order_ref)
  return _internal_order_ref();
}
inline void TradeField::set_order_ref(const std::string& value) {
  _internal_set_order_ref(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.order_ref)
}
inline std::string* TradeField::mutable_order_ref() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.order_ref)
  return _internal_mutable_order_ref();
}
inline const std::string& TradeField::_internal_order_ref() const {
  return order_ref_.Get();
}
inline void TradeField::_internal_set_order_ref(const std::string& value) {
  
  order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_order_ref(std::string&& value) {
  
  order_ref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.order_ref)
}
inline void TradeField::set_order_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.order_ref)
}
inline void TradeField::set_order_ref(const char* value,
    size_t size) {
  
  order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.order_ref)
}
inline std::string* TradeField::_internal_mutable_order_ref() {
  
  return order_ref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_order_ref() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.order_ref)
  return order_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.order_ref)
}

// string user_id = 5;
inline void TradeField::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::user_id() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.user_id)
  return _internal_user_id();
}
inline void TradeField::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.user_id)
}
inline std::string* TradeField::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TradeField::_internal_user_id() const {
  return user_id_.Get();
}
inline void TradeField::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.user_id)
}
inline void TradeField::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.user_id)
}
inline void TradeField::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.user_id)
}
inline std::string* TradeField::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_user_id() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.user_id)
}

// string trade_id = 6;
inline void TradeField::clear_trade_id() {
  trade_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::trade_id() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.trade_id)
  return _internal_trade_id();
}
inline void TradeField::set_trade_id(const std::string& value) {
  _internal_set_trade_id(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.trade_id)
}
inline std::string* TradeField::mutable_trade_id() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.trade_id)
  return _internal_mutable_trade_id();
}
inline const std::string& TradeField::_internal_trade_id() const {
  return trade_id_.Get();
}
inline void TradeField::_internal_set_trade_id(const std::string& value) {
  
  trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_trade_id(std::string&& value) {
  
  trade_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.trade_id)
}
inline void TradeField::set_trade_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.trade_id)
}
inline void TradeField::set_trade_id(const char* value,
    size_t size) {
  
  trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.trade_id)
}
inline std::string* TradeField::_internal_mutable_trade_id() {
  
  return trade_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_trade_id() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.trade_id)
  return trade_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.trade_id)
}

// int32 direction = 7;
inline void TradeField::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::direction() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.direction)
  return _internal_direction();
}
inline void TradeField::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void TradeField::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.direction)
}

// int32 offset_flag = 8;
inline void TradeField::clear_offset_flag() {
  offset_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::_internal_offset_flag() const {
  return offset_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::offset_flag() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.offset_flag)
  return _internal_offset_flag();
}
inline void TradeField::_internal_set_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_flag_ = value;
}
inline void TradeField::set_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset_flag(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.offset_flag)
}

// int32 hedge_flag = 9;
inline void TradeField::clear_hedge_flag() {
  hedge_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::_internal_hedge_flag() const {
  return hedge_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::hedge_flag() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.hedge_flag)
  return _internal_hedge_flag();
}
inline void TradeField::_internal_set_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hedge_flag_ = value;
}
inline void TradeField::set_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hedge_flag(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.hedge_flag)
}

// double price = 10;
inline void TradeField::clear_price() {
  price_ = 0;
}
inline double TradeField::_internal_price() const {
  return price_;
}
inline double TradeField::price() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.price)
  return _internal_price();
}
inline void TradeField::_internal_set_price(double value) {
  
  price_ = value;
}
inline void TradeField::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.price)
}

// int32 volume = 11;
inline void TradeField::clear_volume() {
  volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::volume() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.volume)
  return _internal_volume();
}
inline void TradeField::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_ = value;
}
inline void TradeField::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.volume)
}

// string trade_date = 12;
inline void TradeField::clear_trade_date() {
  trade_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::trade_date() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.trade_date)
  return _internal_trade_date();
}
inline void TradeField::set_trade_date(const std::string& value) {
  _internal_set_trade_date(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.trade_date)
}
inline std::string* TradeField::mutable_trade_date() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.trade_date)
  return _internal_mutable_trade_date();
}
inline const std::string& TradeField::_internal_trade_date() const {
  return trade_date_.Get();
}
inline void TradeField::_internal_set_trade_date(const std::string& value) {
  
  trade_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_trade_date(std::string&& value) {
  
  trade_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.trade_date)
}
inline void TradeField::set_trade_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.trade_date)
}
inline void TradeField::set_trade_date(const char* value,
    size_t size) {
  
  trade_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.trade_date)
}
inline std::string* TradeField::_internal_mutable_trade_date() {
  
  return trade_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_trade_date() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.trade_date)
  return trade_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.trade_date)
}

// string trade_time = 13;
inline void TradeField::clear_trade_time() {
  trade_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::trade_time() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.trade_time)
  return _internal_trade_time();
}
inline void TradeField::set_trade_time(const std::string& value) {
  _internal_set_trade_time(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.trade_time)
}
inline std::string* TradeField::mutable_trade_time() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.trade_time)
  return _internal_mutable_trade_time();
}
inline const std::string& TradeField::_internal_trade_time() const {
  return trade_time_.Get();
}
inline void TradeField::_internal_set_trade_time(const std::string& value) {
  
  trade_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_trade_time(std::string&& value) {
  
  trade_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.trade_time)
}
inline void TradeField::set_trade_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trade_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.trade_time)
}
inline void TradeField::set_trade_time(const char* value,
    size_t size) {
  
  trade_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.trade_time)
}
inline std::string* TradeField::_internal_mutable_trade_time() {
  
  return trade_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_trade_time() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.trade_time)
  return trade_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_trade_time(std::string* trade_time) {
  if (trade_time != nullptr) {
    
  } else {
    
  }
  trade_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.trade_time)
}

// string order_local_id = 14;
inline void TradeField::clear_order_local_id() {
  order_local_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::order_local_id() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.order_local_id)
  return _internal_order_local_id();
}
inline void TradeField::set_order_local_id(const std::string& value) {
  _internal_set_order_local_id(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.order_local_id)
}
inline std::string* TradeField::mutable_order_local_id() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.order_local_id)
  return _internal_mutable_order_local_id();
}
inline const std::string& TradeField::_internal_order_local_id() const {
  return order_local_id_.Get();
}
inline void TradeField::_internal_set_order_local_id(const std::string& value) {
  
  order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_order_local_id(std::string&& value) {
  
  order_local_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.order_local_id)
}
inline void TradeField::set_order_local_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.order_local_id)
}
inline void TradeField::set_order_local_id(const char* value,
    size_t size) {
  
  order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.order_local_id)
}
inline std::string* TradeField::_internal_mutable_order_local_id() {
  
  return order_local_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_order_local_id() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.order_local_id)
  return order_local_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_order_local_id(std::string* order_local_id) {
  if (order_local_id != nullptr) {
    
  } else {
    
  }
  order_local_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_local_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.order_local_id)
}

// string trading_day = 15;
inline void TradeField::clear_trading_day() {
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeField::trading_day() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.trading_day)
  return _internal_trading_day();
}
inline void TradeField::set_trading_day(const std::string& value) {
  _internal_set_trading_day(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.trading_day)
}
inline std::string* TradeField::mutable_trading_day() {
  // @@protoc_insertion_point(field_mutable:rtn.TradeField.trading_day)
  return _internal_mutable_trading_day();
}
inline const std::string& TradeField::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void TradeField::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeField::set_trading_day(std::string&& value) {
  
  trading_day_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.TradeField.trading_day)
}
inline void TradeField::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.TradeField.trading_day)
}
inline void TradeField::set_trading_day(const char* value,
    size_t size) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.TradeField.trading_day)
}
inline std::string* TradeField::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeField::release_trading_day() {
  // @@protoc_insertion_point(field_release:rtn.TradeField.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeField::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.TradeField.trading_day)
}

// int32 broker_order_seq = 16;
inline void TradeField::clear_broker_order_seq() {
  broker_order_seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::_internal_broker_order_seq() const {
  return broker_order_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeField::broker_order_seq() const {
  // @@protoc_insertion_point(field_get:rtn.TradeField.broker_order_seq)
  return _internal_broker_order_seq();
}
inline void TradeField::_internal_set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  broker_order_seq_ = value;
}
inline void TradeField::set_broker_order_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_broker_order_seq(value);
  // @@protoc_insertion_point(field_set:rtn.TradeField.broker_order_seq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rtn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Rtn_2eTrade_2eproto

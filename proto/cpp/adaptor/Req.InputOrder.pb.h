// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Req.InputOrder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Req_2eInputOrder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Req_2eInputOrder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Req_2eInputOrder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Req_2eInputOrder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Req_2eInputOrder_2eproto;
namespace req {
class InputOrderField;
class InputOrderFieldDefaultTypeInternal;
extern InputOrderFieldDefaultTypeInternal _InputOrderField_default_instance_;
}  // namespace req
PROTOBUF_NAMESPACE_OPEN
template<> ::req::InputOrderField* Arena::CreateMaybeMessage<::req::InputOrderField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace req {

// ===================================================================

class InputOrderField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:req.InputOrderField) */ {
 public:
  inline InputOrderField() : InputOrderField(nullptr) {}
  virtual ~InputOrderField();

  InputOrderField(const InputOrderField& from);
  InputOrderField(InputOrderField&& from) noexcept
    : InputOrderField() {
    *this = ::std::move(from);
  }

  inline InputOrderField& operator=(const InputOrderField& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputOrderField& operator=(InputOrderField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputOrderField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputOrderField* internal_default_instance() {
    return reinterpret_cast<const InputOrderField*>(
               &_InputOrderField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputOrderField& a, InputOrderField& b) {
    a.Swap(&b);
  }
  inline void Swap(InputOrderField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputOrderField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputOrderField* New() const final {
    return CreateMaybeMessage<InputOrderField>(nullptr);
  }

  InputOrderField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputOrderField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputOrderField& from);
  void MergeFrom(const InputOrderField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputOrderField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "req.InputOrderField";
  }
  protected:
  explicit InputOrderField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Req_2eInputOrder_2eproto);
    return ::descriptor_table_Req_2eInputOrder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdFieldNumber = 1,
    kInvestorIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kInstrumentIdFieldNumber = 4,
    kExchangeIdFieldNumber = 5,
    kOrderPriceTypeFieldNumber = 6,
    kDirectionFieldNumber = 7,
    kCombOffsetFlagFieldNumber = 8,
    kCombHedgeFlagFieldNumber = 9,
    kLimitPriceFieldNumber = 10,
    kVolumeTotalOriginalFieldNumber = 11,
    kTimeConditionFieldNumber = 12,
    kVolumeConditionFieldNumber = 13,
    kMinVolumeFieldNumber = 14,
    kStopPriceFieldNumber = 16,
    kContigentConditionFieldNumber = 15,
    kForceCloseReasonFieldNumber = 17,
    kIsAutoSuspendFieldNumber = 18,
  };
  // string broker_id = 1;
  void clear_broker_id();
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 2;
  void clear_investor_id();
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string instrument_id = 4;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_id = 5;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // int32 order_price_type = 6;
  void clear_order_price_type();
  ::PROTOBUF_NAMESPACE_ID::int32 order_price_type() const;
  void set_order_price_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_price_type() const;
  void _internal_set_order_price_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 direction = 7;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 comb_offset_flag = 8;
  void clear_comb_offset_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 comb_offset_flag() const;
  void set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comb_offset_flag() const;
  void _internal_set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 comb_hedge_flag = 9;
  void clear_comb_hedge_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 comb_hedge_flag() const;
  void set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comb_hedge_flag() const;
  void _internal_set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double limit_price = 10;
  void clear_limit_price();
  double limit_price() const;
  void set_limit_price(double value);
  private:
  double _internal_limit_price() const;
  void _internal_set_limit_price(double value);
  public:

  // int32 volume_total_original = 11;
  void clear_volume_total_original();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total_original() const;
  void set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_total_original() const;
  void _internal_set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_condition = 12;
  void clear_time_condition();
  ::PROTOBUF_NAMESPACE_ID::int32 time_condition() const;
  void set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_condition() const;
  void _internal_set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume_condition = 13;
  void clear_volume_condition();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_condition() const;
  void set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_condition() const;
  void _internal_set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_volume = 14;
  void clear_min_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 min_volume() const;
  void set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_volume() const;
  void _internal_set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double stop_price = 16;
  void clear_stop_price();
  double stop_price() const;
  void set_stop_price(double value);
  private:
  double _internal_stop_price() const;
  void _internal_set_stop_price(double value);
  public:

  // int32 contigent_condition = 15;
  void clear_contigent_condition();
  ::PROTOBUF_NAMESPACE_ID::int32 contigent_condition() const;
  void set_contigent_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contigent_condition() const;
  void _internal_set_contigent_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 force_close_reason = 17;
  void clear_force_close_reason();
  ::PROTOBUF_NAMESPACE_ID::int32 force_close_reason() const;
  void set_force_close_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_force_close_reason() const;
  void _internal_set_force_close_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_auto_suspend = 18;
  void clear_is_auto_suspend();
  ::PROTOBUF_NAMESPACE_ID::int32 is_auto_suspend() const;
  void set_is_auto_suspend(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_auto_suspend() const;
  void _internal_set_is_auto_suspend(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:req.InputOrderField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_hedge_flag_;
  double limit_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total_original_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_volume_;
  double stop_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 contigent_condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 force_close_reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_auto_suspend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Req_2eInputOrder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputOrderField

// string broker_id = 1;
inline void InputOrderField::clear_broker_id() {
  broker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputOrderField::broker_id() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.broker_id)
  return _internal_broker_id();
}
inline void InputOrderField::set_broker_id(const std::string& value) {
  _internal_set_broker_id(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.broker_id)
}
inline std::string* InputOrderField::mutable_broker_id() {
  // @@protoc_insertion_point(field_mutable:req.InputOrderField.broker_id)
  return _internal_mutable_broker_id();
}
inline const std::string& InputOrderField::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void InputOrderField::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputOrderField::set_broker_id(std::string&& value) {
  
  broker_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:req.InputOrderField.broker_id)
}
inline void InputOrderField::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:req.InputOrderField.broker_id)
}
inline void InputOrderField::set_broker_id(const char* value,
    size_t size) {
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:req.InputOrderField.broker_id)
}
inline std::string* InputOrderField::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputOrderField::release_broker_id() {
  // @@protoc_insertion_point(field_release:req.InputOrderField.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputOrderField::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:req.InputOrderField.broker_id)
}

// string investor_id = 2;
inline void InputOrderField::clear_investor_id() {
  investor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputOrderField::investor_id() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.investor_id)
  return _internal_investor_id();
}
inline void InputOrderField::set_investor_id(const std::string& value) {
  _internal_set_investor_id(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.investor_id)
}
inline std::string* InputOrderField::mutable_investor_id() {
  // @@protoc_insertion_point(field_mutable:req.InputOrderField.investor_id)
  return _internal_mutable_investor_id();
}
inline const std::string& InputOrderField::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void InputOrderField::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputOrderField::set_investor_id(std::string&& value) {
  
  investor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:req.InputOrderField.investor_id)
}
inline void InputOrderField::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:req.InputOrderField.investor_id)
}
inline void InputOrderField::set_investor_id(const char* value,
    size_t size) {
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:req.InputOrderField.investor_id)
}
inline std::string* InputOrderField::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputOrderField::release_investor_id() {
  // @@protoc_insertion_point(field_release:req.InputOrderField.investor_id)
  return investor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputOrderField::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:req.InputOrderField.investor_id)
}

// string user_id = 3;
inline void InputOrderField::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputOrderField::user_id() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.user_id)
  return _internal_user_id();
}
inline void InputOrderField::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.user_id)
}
inline std::string* InputOrderField::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:req.InputOrderField.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& InputOrderField::_internal_user_id() const {
  return user_id_.Get();
}
inline void InputOrderField::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputOrderField::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:req.InputOrderField.user_id)
}
inline void InputOrderField::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:req.InputOrderField.user_id)
}
inline void InputOrderField::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:req.InputOrderField.user_id)
}
inline std::string* InputOrderField::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputOrderField::release_user_id() {
  // @@protoc_insertion_point(field_release:req.InputOrderField.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputOrderField::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:req.InputOrderField.user_id)
}

// string instrument_id = 4;
inline void InputOrderField::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputOrderField::instrument_id() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.instrument_id)
  return _internal_instrument_id();
}
inline void InputOrderField::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.instrument_id)
}
inline std::string* InputOrderField::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:req.InputOrderField.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& InputOrderField::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void InputOrderField::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputOrderField::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:req.InputOrderField.instrument_id)
}
inline void InputOrderField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:req.InputOrderField.instrument_id)
}
inline void InputOrderField::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:req.InputOrderField.instrument_id)
}
inline std::string* InputOrderField::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputOrderField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:req.InputOrderField.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputOrderField::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:req.InputOrderField.instrument_id)
}

// string exchange_id = 5;
inline void InputOrderField::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputOrderField::exchange_id() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.exchange_id)
  return _internal_exchange_id();
}
inline void InputOrderField::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.exchange_id)
}
inline std::string* InputOrderField::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:req.InputOrderField.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& InputOrderField::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void InputOrderField::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputOrderField::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:req.InputOrderField.exchange_id)
}
inline void InputOrderField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:req.InputOrderField.exchange_id)
}
inline void InputOrderField::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:req.InputOrderField.exchange_id)
}
inline std::string* InputOrderField::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputOrderField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:req.InputOrderField.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputOrderField::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:req.InputOrderField.exchange_id)
}

// int32 order_price_type = 6;
inline void InputOrderField::clear_order_price_type() {
  order_price_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_order_price_type() const {
  return order_price_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::order_price_type() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.order_price_type)
  return _internal_order_price_type();
}
inline void InputOrderField::_internal_set_order_price_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_price_type_ = value;
}
inline void InputOrderField::set_order_price_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_price_type(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.order_price_type)
}

// int32 direction = 7;
inline void InputOrderField::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::direction() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.direction)
  return _internal_direction();
}
inline void InputOrderField::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void InputOrderField::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.direction)
}

// int32 comb_offset_flag = 8;
inline void InputOrderField::clear_comb_offset_flag() {
  comb_offset_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_comb_offset_flag() const {
  return comb_offset_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::comb_offset_flag() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.comb_offset_flag)
  return _internal_comb_offset_flag();
}
inline void InputOrderField::_internal_set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_offset_flag_ = value;
}
inline void InputOrderField::set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_comb_offset_flag(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.comb_offset_flag)
}

// int32 comb_hedge_flag = 9;
inline void InputOrderField::clear_comb_hedge_flag() {
  comb_hedge_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_comb_hedge_flag() const {
  return comb_hedge_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::comb_hedge_flag() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.comb_hedge_flag)
  return _internal_comb_hedge_flag();
}
inline void InputOrderField::_internal_set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_hedge_flag_ = value;
}
inline void InputOrderField::set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_comb_hedge_flag(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.comb_hedge_flag)
}

// double limit_price = 10;
inline void InputOrderField::clear_limit_price() {
  limit_price_ = 0;
}
inline double InputOrderField::_internal_limit_price() const {
  return limit_price_;
}
inline double InputOrderField::limit_price() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.limit_price)
  return _internal_limit_price();
}
inline void InputOrderField::_internal_set_limit_price(double value) {
  
  limit_price_ = value;
}
inline void InputOrderField::set_limit_price(double value) {
  _internal_set_limit_price(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.limit_price)
}

// int32 volume_total_original = 11;
inline void InputOrderField::clear_volume_total_original() {
  volume_total_original_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_volume_total_original() const {
  return volume_total_original_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::volume_total_original() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.volume_total_original)
  return _internal_volume_total_original();
}
inline void InputOrderField::_internal_set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_total_original_ = value;
}
inline void InputOrderField::set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_total_original(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.volume_total_original)
}

// int32 time_condition = 12;
inline void InputOrderField::clear_time_condition() {
  time_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_time_condition() const {
  return time_condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::time_condition() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.time_condition)
  return _internal_time_condition();
}
inline void InputOrderField::_internal_set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_condition_ = value;
}
inline void InputOrderField::set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_condition(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.time_condition)
}

// int32 volume_condition = 13;
inline void InputOrderField::clear_volume_condition() {
  volume_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_volume_condition() const {
  return volume_condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::volume_condition() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.volume_condition)
  return _internal_volume_condition();
}
inline void InputOrderField::_internal_set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_condition_ = value;
}
inline void InputOrderField::set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_condition(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.volume_condition)
}

// int32 min_volume = 14;
inline void InputOrderField::clear_min_volume() {
  min_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_min_volume() const {
  return min_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::min_volume() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.min_volume)
  return _internal_min_volume();
}
inline void InputOrderField::_internal_set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_volume_ = value;
}
inline void InputOrderField::set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_volume(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.min_volume)
}

// int32 contigent_condition = 15;
inline void InputOrderField::clear_contigent_condition() {
  contigent_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_contigent_condition() const {
  return contigent_condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::contigent_condition() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.contigent_condition)
  return _internal_contigent_condition();
}
inline void InputOrderField::_internal_set_contigent_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contigent_condition_ = value;
}
inline void InputOrderField::set_contigent_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contigent_condition(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.contigent_condition)
}

// double stop_price = 16;
inline void InputOrderField::clear_stop_price() {
  stop_price_ = 0;
}
inline double InputOrderField::_internal_stop_price() const {
  return stop_price_;
}
inline double InputOrderField::stop_price() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.stop_price)
  return _internal_stop_price();
}
inline void InputOrderField::_internal_set_stop_price(double value) {
  
  stop_price_ = value;
}
inline void InputOrderField::set_stop_price(double value) {
  _internal_set_stop_price(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.stop_price)
}

// int32 force_close_reason = 17;
inline void InputOrderField::clear_force_close_reason() {
  force_close_reason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_force_close_reason() const {
  return force_close_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::force_close_reason() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.force_close_reason)
  return _internal_force_close_reason();
}
inline void InputOrderField::_internal_set_force_close_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  force_close_reason_ = value;
}
inline void InputOrderField::set_force_close_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_force_close_reason(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.force_close_reason)
}

// int32 is_auto_suspend = 18;
inline void InputOrderField::clear_is_auto_suspend() {
  is_auto_suspend_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::_internal_is_auto_suspend() const {
  return is_auto_suspend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputOrderField::is_auto_suspend() const {
  // @@protoc_insertion_point(field_get:req.InputOrderField.is_auto_suspend)
  return _internal_is_auto_suspend();
}
inline void InputOrderField::_internal_set_is_auto_suspend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_auto_suspend_ = value;
}
inline void InputOrderField::set_is_auto_suspend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_auto_suspend(value);
  // @@protoc_insertion_point(field_set:req.InputOrderField.is_auto_suspend)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace req

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Req_2eInputOrder_2eproto

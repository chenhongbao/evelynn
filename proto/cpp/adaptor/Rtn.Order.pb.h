// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rtn.Order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Rtn_2eOrder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Rtn_2eOrder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Rtn_2eOrder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Rtn_2eOrder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rtn_2eOrder_2eproto;
namespace rtn {
class OrderField;
class OrderFieldDefaultTypeInternal;
extern OrderFieldDefaultTypeInternal _OrderField_default_instance_;
}  // namespace rtn
PROTOBUF_NAMESPACE_OPEN
template<> ::rtn::OrderField* Arena::CreateMaybeMessage<::rtn::OrderField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rtn {

// ===================================================================

class OrderField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rtn.OrderField) */ {
 public:
  inline OrderField() : OrderField(nullptr) {}
  virtual ~OrderField();

  OrderField(const OrderField& from);
  OrderField(OrderField&& from) noexcept
    : OrderField() {
    *this = ::std::move(from);
  }

  inline OrderField& operator=(const OrderField& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderField& operator=(OrderField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderField* internal_default_instance() {
    return reinterpret_cast<const OrderField*>(
               &_OrderField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderField& a, OrderField& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderField* New() const final {
    return CreateMaybeMessage<OrderField>(nullptr);
  }

  OrderField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderField& from);
  void MergeFrom(const OrderField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rtn.OrderField";
  }
  protected:
  explicit OrderField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rtn_2eOrder_2eproto);
    return ::descriptor_table_Rtn_2eOrder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdFieldNumber = 1,
    kInvestorIdFieldNumber = 2,
    kInstrumentIdFieldNumber = 3,
    kOrderRefFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kOrderLocalIdFieldNumber = 18,
    kExchangeIdFieldNumber = 19,
    kTradingDayFieldNumber = 21,
    kOrderSysIdFieldNumber = 22,
    kInsertDateFieldNumber = 26,
    kInsertTimeFieldNumber = 27,
    kActiveTimeFieldNumber = 28,
    kSuspendTimeFieldNumber = 29,
    kUpdateTimeFieldNumber = 30,
    kCancelTimeFieldNumber = 31,
    kStatusMsgFieldNumber = 34,
    kAccountIdFieldNumber = 36,
    kCurrencyIdFieldNumber = 37,
    kDirectionFieldNumber = 6,
    kCombOffsetFlagFieldNumber = 7,
    kLimitPriceFieldNumber = 9,
    kCombHedgeFlagFieldNumber = 8,
    kVolumeTotalOriginalFieldNumber = 10,
    kTimeConditionFieldNumber = 11,
    kVolumeConditionFieldNumber = 12,
    kMinVolumeFieldNumber = 13,
    kContigentConditionFieldNumber = 14,
    kStopPriceFieldNumber = 15,
    kIsAutoSuspendFieldNumber = 16,
    kRequestIdFieldNumber = 17,
    kOrderSubmitStatusFieldNumber = 20,
    kOrderStatusFieldNumber = 23,
    kVolumeTradedFieldNumber = 24,
    kVolumeTotalFieldNumber = 25,
    kFrontIdFieldNumber = 32,
    kSessionIdFieldNumber = 33,
    kZceTotalTradedVolumeFieldNumber = 35,
  };
  // string broker_id = 1;
  void clear_broker_id();
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 2;
  void clear_investor_id();
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string instrument_id = 3;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string order_ref = 4;
  void clear_order_ref();
  const std::string& order_ref() const;
  void set_order_ref(const std::string& value);
  void set_order_ref(std::string&& value);
  void set_order_ref(const char* value);
  void set_order_ref(const char* value, size_t size);
  std::string* mutable_order_ref();
  std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);
  private:
  const std::string& _internal_order_ref() const;
  void _internal_set_order_ref(const std::string& value);
  std::string* _internal_mutable_order_ref();
  public:

  // string user_id = 5;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string order_local_id = 18;
  void clear_order_local_id();
  const std::string& order_local_id() const;
  void set_order_local_id(const std::string& value);
  void set_order_local_id(std::string&& value);
  void set_order_local_id(const char* value);
  void set_order_local_id(const char* value, size_t size);
  std::string* mutable_order_local_id();
  std::string* release_order_local_id();
  void set_allocated_order_local_id(std::string* order_local_id);
  private:
  const std::string& _internal_order_local_id() const;
  void _internal_set_order_local_id(const std::string& value);
  std::string* _internal_mutable_order_local_id();
  public:

  // string exchange_id = 19;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string trading_day = 21;
  void clear_trading_day();
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string order_sys_id = 22;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  void set_order_sys_id(const std::string& value);
  void set_order_sys_id(std::string&& value);
  void set_order_sys_id(const char* value);
  void set_order_sys_id(const char* value, size_t size);
  std::string* mutable_order_sys_id();
  std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string insert_date = 26;
  void clear_insert_date();
  const std::string& insert_date() const;
  void set_insert_date(const std::string& value);
  void set_insert_date(std::string&& value);
  void set_insert_date(const char* value);
  void set_insert_date(const char* value, size_t size);
  std::string* mutable_insert_date();
  std::string* release_insert_date();
  void set_allocated_insert_date(std::string* insert_date);
  private:
  const std::string& _internal_insert_date() const;
  void _internal_set_insert_date(const std::string& value);
  std::string* _internal_mutable_insert_date();
  public:

  // string insert_time = 27;
  void clear_insert_time();
  const std::string& insert_time() const;
  void set_insert_time(const std::string& value);
  void set_insert_time(std::string&& value);
  void set_insert_time(const char* value);
  void set_insert_time(const char* value, size_t size);
  std::string* mutable_insert_time();
  std::string* release_insert_time();
  void set_allocated_insert_time(std::string* insert_time);
  private:
  const std::string& _internal_insert_time() const;
  void _internal_set_insert_time(const std::string& value);
  std::string* _internal_mutable_insert_time();
  public:

  // string active_time = 28;
  void clear_active_time();
  const std::string& active_time() const;
  void set_active_time(const std::string& value);
  void set_active_time(std::string&& value);
  void set_active_time(const char* value);
  void set_active_time(const char* value, size_t size);
  std::string* mutable_active_time();
  std::string* release_active_time();
  void set_allocated_active_time(std::string* active_time);
  private:
  const std::string& _internal_active_time() const;
  void _internal_set_active_time(const std::string& value);
  std::string* _internal_mutable_active_time();
  public:

  // string suspend_time = 29;
  void clear_suspend_time();
  const std::string& suspend_time() const;
  void set_suspend_time(const std::string& value);
  void set_suspend_time(std::string&& value);
  void set_suspend_time(const char* value);
  void set_suspend_time(const char* value, size_t size);
  std::string* mutable_suspend_time();
  std::string* release_suspend_time();
  void set_allocated_suspend_time(std::string* suspend_time);
  private:
  const std::string& _internal_suspend_time() const;
  void _internal_set_suspend_time(const std::string& value);
  std::string* _internal_mutable_suspend_time();
  public:

  // string update_time = 30;
  void clear_update_time();
  const std::string& update_time() const;
  void set_update_time(const std::string& value);
  void set_update_time(std::string&& value);
  void set_update_time(const char* value);
  void set_update_time(const char* value, size_t size);
  std::string* mutable_update_time();
  std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string cancel_time = 31;
  void clear_cancel_time();
  const std::string& cancel_time() const;
  void set_cancel_time(const std::string& value);
  void set_cancel_time(std::string&& value);
  void set_cancel_time(const char* value);
  void set_cancel_time(const char* value, size_t size);
  std::string* mutable_cancel_time();
  std::string* release_cancel_time();
  void set_allocated_cancel_time(std::string* cancel_time);
  private:
  const std::string& _internal_cancel_time() const;
  void _internal_set_cancel_time(const std::string& value);
  std::string* _internal_mutable_cancel_time();
  public:

  // string status_msg = 34;
  void clear_status_msg();
  const std::string& status_msg() const;
  void set_status_msg(const std::string& value);
  void set_status_msg(std::string&& value);
  void set_status_msg(const char* value);
  void set_status_msg(const char* value, size_t size);
  std::string* mutable_status_msg();
  std::string* release_status_msg();
  void set_allocated_status_msg(std::string* status_msg);
  private:
  const std::string& _internal_status_msg() const;
  void _internal_set_status_msg(const std::string& value);
  std::string* _internal_mutable_status_msg();
  public:

  // string account_id = 36;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string currency_id = 37;
  void clear_currency_id();
  const std::string& currency_id() const;
  void set_currency_id(const std::string& value);
  void set_currency_id(std::string&& value);
  void set_currency_id(const char* value);
  void set_currency_id(const char* value, size_t size);
  std::string* mutable_currency_id();
  std::string* release_currency_id();
  void set_allocated_currency_id(std::string* currency_id);
  private:
  const std::string& _internal_currency_id() const;
  void _internal_set_currency_id(const std::string& value);
  std::string* _internal_mutable_currency_id();
  public:

  // int32 direction = 6;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 comb_offset_flag = 7;
  void clear_comb_offset_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 comb_offset_flag() const;
  void set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comb_offset_flag() const;
  void _internal_set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double limit_price = 9;
  void clear_limit_price();
  double limit_price() const;
  void set_limit_price(double value);
  private:
  double _internal_limit_price() const;
  void _internal_set_limit_price(double value);
  public:

  // int32 comb_hedge_flag = 8;
  void clear_comb_hedge_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 comb_hedge_flag() const;
  void set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comb_hedge_flag() const;
  void _internal_set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume_total_original = 10;
  void clear_volume_total_original();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total_original() const;
  void set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_total_original() const;
  void _internal_set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time_condition = 11;
  void clear_time_condition();
  ::PROTOBUF_NAMESPACE_ID::int32 time_condition() const;
  void set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_condition() const;
  void _internal_set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume_condition = 12;
  void clear_volume_condition();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_condition() const;
  void set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_condition() const;
  void _internal_set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_volume = 13;
  void clear_min_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 min_volume() const;
  void set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_volume() const;
  void _internal_set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 contigent_condition = 14;
  void clear_contigent_condition();
  ::PROTOBUF_NAMESPACE_ID::int32 contigent_condition() const;
  void set_contigent_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contigent_condition() const;
  void _internal_set_contigent_condition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double stop_price = 15;
  void clear_stop_price();
  double stop_price() const;
  void set_stop_price(double value);
  private:
  double _internal_stop_price() const;
  void _internal_set_stop_price(double value);
  public:

  // int32 is_auto_suspend = 16;
  void clear_is_auto_suspend();
  ::PROTOBUF_NAMESPACE_ID::int32 is_auto_suspend() const;
  void set_is_auto_suspend(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_auto_suspend() const;
  void _internal_set_is_auto_suspend(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 request_id = 17;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 order_submit_status = 20;
  void clear_order_submit_status();
  ::PROTOBUF_NAMESPACE_ID::int32 order_submit_status() const;
  void set_order_submit_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_submit_status() const;
  void _internal_set_order_submit_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 order_status = 23;
  void clear_order_status();
  ::PROTOBUF_NAMESPACE_ID::int32 order_status() const;
  void set_order_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_status() const;
  void _internal_set_order_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume_traded = 24;
  void clear_volume_traded();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_traded() const;
  void set_volume_traded(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_traded() const;
  void _internal_set_volume_traded(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume_total = 25;
  void clear_volume_total();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total() const;
  void set_volume_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_total() const;
  void _internal_set_volume_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 front_id = 32;
  void clear_front_id();
  ::PROTOBUF_NAMESPACE_ID::int32 front_id() const;
  void set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_front_id() const;
  void _internal_set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 session_id = 33;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 zce_total_traded_volume = 35;
  void clear_zce_total_traded_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 zce_total_traded_volume() const;
  void set_zce_total_traded_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zce_total_traded_volume() const;
  void _internal_set_zce_total_traded_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rtn.OrderField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suspend_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_offset_flag_;
  double limit_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total_original_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 contigent_condition_;
  double stop_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_auto_suspend_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_submit_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_traded_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_total_;
  ::PROTOBUF_NAMESPACE_ID::int32 front_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 zce_total_traded_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rtn_2eOrder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderField

// string broker_id = 1;
inline void OrderField::clear_broker_id() {
  broker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::broker_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.broker_id)
  return _internal_broker_id();
}
inline void OrderField::set_broker_id(const std::string& value) {
  _internal_set_broker_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.broker_id)
}
inline std::string* OrderField::mutable_broker_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.broker_id)
  return _internal_mutable_broker_id();
}
inline const std::string& OrderField::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void OrderField::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_broker_id(std::string&& value) {
  
  broker_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.broker_id)
}
inline void OrderField::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.broker_id)
}
inline void OrderField::set_broker_id(const char* value,
    size_t size) {
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.broker_id)
}
inline std::string* OrderField::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_broker_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.broker_id)
}

// string investor_id = 2;
inline void OrderField::clear_investor_id() {
  investor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::investor_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.investor_id)
  return _internal_investor_id();
}
inline void OrderField::set_investor_id(const std::string& value) {
  _internal_set_investor_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.investor_id)
}
inline std::string* OrderField::mutable_investor_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.investor_id)
  return _internal_mutable_investor_id();
}
inline const std::string& OrderField::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void OrderField::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_investor_id(std::string&& value) {
  
  investor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.investor_id)
}
inline void OrderField::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.investor_id)
}
inline void OrderField::set_investor_id(const char* value,
    size_t size) {
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.investor_id)
}
inline std::string* OrderField::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_investor_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.investor_id)
  return investor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.investor_id)
}

// string instrument_id = 3;
inline void OrderField::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::instrument_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.instrument_id)
  return _internal_instrument_id();
}
inline void OrderField::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.instrument_id)
}
inline std::string* OrderField::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& OrderField::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void OrderField::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.instrument_id)
}
inline void OrderField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.instrument_id)
}
inline void OrderField::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.instrument_id)
}
inline std::string* OrderField::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.instrument_id)
}

// string order_ref = 4;
inline void OrderField::clear_order_ref() {
  order_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::order_ref() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.order_ref)
  return _internal_order_ref();
}
inline void OrderField::set_order_ref(const std::string& value) {
  _internal_set_order_ref(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.order_ref)
}
inline std::string* OrderField::mutable_order_ref() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.order_ref)
  return _internal_mutable_order_ref();
}
inline const std::string& OrderField::_internal_order_ref() const {
  return order_ref_.Get();
}
inline void OrderField::_internal_set_order_ref(const std::string& value) {
  
  order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_order_ref(std::string&& value) {
  
  order_ref_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.order_ref)
}
inline void OrderField::set_order_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.order_ref)
}
inline void OrderField::set_order_ref(const char* value,
    size_t size) {
  
  order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.order_ref)
}
inline std::string* OrderField::_internal_mutable_order_ref() {
  
  return order_ref_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_order_ref() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.order_ref)
  return order_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.order_ref)
}

// string user_id = 5;
inline void OrderField::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::user_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.user_id)
  return _internal_user_id();
}
inline void OrderField::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.user_id)
}
inline std::string* OrderField::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& OrderField::_internal_user_id() const {
  return user_id_.Get();
}
inline void OrderField::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.user_id)
}
inline void OrderField::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.user_id)
}
inline void OrderField::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.user_id)
}
inline std::string* OrderField::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_user_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.user_id)
}

// int32 direction = 6;
inline void OrderField::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::direction() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.direction)
  return _internal_direction();
}
inline void OrderField::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void OrderField::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.direction)
}

// int32 comb_offset_flag = 7;
inline void OrderField::clear_comb_offset_flag() {
  comb_offset_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_comb_offset_flag() const {
  return comb_offset_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::comb_offset_flag() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.comb_offset_flag)
  return _internal_comb_offset_flag();
}
inline void OrderField::_internal_set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_offset_flag_ = value;
}
inline void OrderField::set_comb_offset_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_comb_offset_flag(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.comb_offset_flag)
}

// int32 comb_hedge_flag = 8;
inline void OrderField::clear_comb_hedge_flag() {
  comb_hedge_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_comb_hedge_flag() const {
  return comb_hedge_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::comb_hedge_flag() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.comb_hedge_flag)
  return _internal_comb_hedge_flag();
}
inline void OrderField::_internal_set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_hedge_flag_ = value;
}
inline void OrderField::set_comb_hedge_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_comb_hedge_flag(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.comb_hedge_flag)
}

// double limit_price = 9;
inline void OrderField::clear_limit_price() {
  limit_price_ = 0;
}
inline double OrderField::_internal_limit_price() const {
  return limit_price_;
}
inline double OrderField::limit_price() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.limit_price)
  return _internal_limit_price();
}
inline void OrderField::_internal_set_limit_price(double value) {
  
  limit_price_ = value;
}
inline void OrderField::set_limit_price(double value) {
  _internal_set_limit_price(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.limit_price)
}

// int32 volume_total_original = 10;
inline void OrderField::clear_volume_total_original() {
  volume_total_original_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_volume_total_original() const {
  return volume_total_original_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::volume_total_original() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.volume_total_original)
  return _internal_volume_total_original();
}
inline void OrderField::_internal_set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_total_original_ = value;
}
inline void OrderField::set_volume_total_original(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_total_original(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.volume_total_original)
}

// int32 time_condition = 11;
inline void OrderField::clear_time_condition() {
  time_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_time_condition() const {
  return time_condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::time_condition() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.time_condition)
  return _internal_time_condition();
}
inline void OrderField::_internal_set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_condition_ = value;
}
inline void OrderField::set_time_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_condition(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.time_condition)
}

// int32 volume_condition = 12;
inline void OrderField::clear_volume_condition() {
  volume_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_volume_condition() const {
  return volume_condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::volume_condition() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.volume_condition)
  return _internal_volume_condition();
}
inline void OrderField::_internal_set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_condition_ = value;
}
inline void OrderField::set_volume_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_condition(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.volume_condition)
}

// int32 min_volume = 13;
inline void OrderField::clear_min_volume() {
  min_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_min_volume() const {
  return min_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::min_volume() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.min_volume)
  return _internal_min_volume();
}
inline void OrderField::_internal_set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_volume_ = value;
}
inline void OrderField::set_min_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_volume(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.min_volume)
}

// int32 contigent_condition = 14;
inline void OrderField::clear_contigent_condition() {
  contigent_condition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_contigent_condition() const {
  return contigent_condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::contigent_condition() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.contigent_condition)
  return _internal_contigent_condition();
}
inline void OrderField::_internal_set_contigent_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contigent_condition_ = value;
}
inline void OrderField::set_contigent_condition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contigent_condition(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.contigent_condition)
}

// double stop_price = 15;
inline void OrderField::clear_stop_price() {
  stop_price_ = 0;
}
inline double OrderField::_internal_stop_price() const {
  return stop_price_;
}
inline double OrderField::stop_price() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.stop_price)
  return _internal_stop_price();
}
inline void OrderField::_internal_set_stop_price(double value) {
  
  stop_price_ = value;
}
inline void OrderField::set_stop_price(double value) {
  _internal_set_stop_price(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.stop_price)
}

// int32 is_auto_suspend = 16;
inline void OrderField::clear_is_auto_suspend() {
  is_auto_suspend_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_is_auto_suspend() const {
  return is_auto_suspend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::is_auto_suspend() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.is_auto_suspend)
  return _internal_is_auto_suspend();
}
inline void OrderField::_internal_set_is_auto_suspend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_auto_suspend_ = value;
}
inline void OrderField::set_is_auto_suspend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_auto_suspend(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.is_auto_suspend)
}

// int32 request_id = 17;
inline void OrderField::clear_request_id() {
  request_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::request_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.request_id)
  return _internal_request_id();
}
inline void OrderField::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_id_ = value;
}
inline void OrderField::set_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.request_id)
}

// string order_local_id = 18;
inline void OrderField::clear_order_local_id() {
  order_local_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::order_local_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.order_local_id)
  return _internal_order_local_id();
}
inline void OrderField::set_order_local_id(const std::string& value) {
  _internal_set_order_local_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.order_local_id)
}
inline std::string* OrderField::mutable_order_local_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.order_local_id)
  return _internal_mutable_order_local_id();
}
inline const std::string& OrderField::_internal_order_local_id() const {
  return order_local_id_.Get();
}
inline void OrderField::_internal_set_order_local_id(const std::string& value) {
  
  order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_order_local_id(std::string&& value) {
  
  order_local_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.order_local_id)
}
inline void OrderField::set_order_local_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.order_local_id)
}
inline void OrderField::set_order_local_id(const char* value,
    size_t size) {
  
  order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.order_local_id)
}
inline std::string* OrderField::_internal_mutable_order_local_id() {
  
  return order_local_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_order_local_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.order_local_id)
  return order_local_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_order_local_id(std::string* order_local_id) {
  if (order_local_id != nullptr) {
    
  } else {
    
  }
  order_local_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_local_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.order_local_id)
}

// string exchange_id = 19;
inline void OrderField::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::exchange_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.exchange_id)
  return _internal_exchange_id();
}
inline void OrderField::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.exchange_id)
}
inline std::string* OrderField::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& OrderField::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void OrderField::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.exchange_id)
}
inline void OrderField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.exchange_id)
}
inline void OrderField::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.exchange_id)
}
inline std::string* OrderField::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.exchange_id)
}

// int32 order_submit_status = 20;
inline void OrderField::clear_order_submit_status() {
  order_submit_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_order_submit_status() const {
  return order_submit_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::order_submit_status() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.order_submit_status)
  return _internal_order_submit_status();
}
inline void OrderField::_internal_set_order_submit_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_submit_status_ = value;
}
inline void OrderField::set_order_submit_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_submit_status(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.order_submit_status)
}

// string trading_day = 21;
inline void OrderField::clear_trading_day() {
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::trading_day() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.trading_day)
  return _internal_trading_day();
}
inline void OrderField::set_trading_day(const std::string& value) {
  _internal_set_trading_day(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.trading_day)
}
inline std::string* OrderField::mutable_trading_day() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.trading_day)
  return _internal_mutable_trading_day();
}
inline const std::string& OrderField::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void OrderField::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_trading_day(std::string&& value) {
  
  trading_day_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.trading_day)
}
inline void OrderField::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.trading_day)
}
inline void OrderField::set_trading_day(const char* value,
    size_t size) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.trading_day)
}
inline std::string* OrderField::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_trading_day() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.trading_day)
}

// string order_sys_id = 22;
inline void OrderField::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::order_sys_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.order_sys_id)
  return _internal_order_sys_id();
}
inline void OrderField::set_order_sys_id(const std::string& value) {
  _internal_set_order_sys_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.order_sys_id)
}
inline std::string* OrderField::mutable_order_sys_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.order_sys_id)
  return _internal_mutable_order_sys_id();
}
inline const std::string& OrderField::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void OrderField::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_order_sys_id(std::string&& value) {
  
  order_sys_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.order_sys_id)
}
inline void OrderField::set_order_sys_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_sys_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.order_sys_id)
}
inline void OrderField::set_order_sys_id(const char* value,
    size_t size) {
  
  order_sys_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.order_sys_id)
}
inline std::string* OrderField::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.order_sys_id)
  return order_sys_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_sys_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.order_sys_id)
}

// int32 order_status = 23;
inline void OrderField::clear_order_status() {
  order_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_order_status() const {
  return order_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::order_status() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.order_status)
  return _internal_order_status();
}
inline void OrderField::_internal_set_order_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_status_ = value;
}
inline void OrderField::set_order_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_status(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.order_status)
}

// int32 volume_traded = 24;
inline void OrderField::clear_volume_traded() {
  volume_traded_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_volume_traded() const {
  return volume_traded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::volume_traded() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.volume_traded)
  return _internal_volume_traded();
}
inline void OrderField::_internal_set_volume_traded(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_traded_ = value;
}
inline void OrderField::set_volume_traded(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_traded(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.volume_traded)
}

// int32 volume_total = 25;
inline void OrderField::clear_volume_total() {
  volume_total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_volume_total() const {
  return volume_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::volume_total() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.volume_total)
  return _internal_volume_total();
}
inline void OrderField::_internal_set_volume_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_total_ = value;
}
inline void OrderField::set_volume_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_total(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.volume_total)
}

// string insert_date = 26;
inline void OrderField::clear_insert_date() {
  insert_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::insert_date() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.insert_date)
  return _internal_insert_date();
}
inline void OrderField::set_insert_date(const std::string& value) {
  _internal_set_insert_date(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.insert_date)
}
inline std::string* OrderField::mutable_insert_date() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.insert_date)
  return _internal_mutable_insert_date();
}
inline const std::string& OrderField::_internal_insert_date() const {
  return insert_date_.Get();
}
inline void OrderField::_internal_set_insert_date(const std::string& value) {
  
  insert_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_insert_date(std::string&& value) {
  
  insert_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.insert_date)
}
inline void OrderField::set_insert_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insert_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.insert_date)
}
inline void OrderField::set_insert_date(const char* value,
    size_t size) {
  
  insert_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.insert_date)
}
inline std::string* OrderField::_internal_mutable_insert_date() {
  
  return insert_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_insert_date() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.insert_date)
  return insert_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_insert_date(std::string* insert_date) {
  if (insert_date != nullptr) {
    
  } else {
    
  }
  insert_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.insert_date)
}

// string insert_time = 27;
inline void OrderField::clear_insert_time() {
  insert_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::insert_time() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.insert_time)
  return _internal_insert_time();
}
inline void OrderField::set_insert_time(const std::string& value) {
  _internal_set_insert_time(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.insert_time)
}
inline std::string* OrderField::mutable_insert_time() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.insert_time)
  return _internal_mutable_insert_time();
}
inline const std::string& OrderField::_internal_insert_time() const {
  return insert_time_.Get();
}
inline void OrderField::_internal_set_insert_time(const std::string& value) {
  
  insert_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_insert_time(std::string&& value) {
  
  insert_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.insert_time)
}
inline void OrderField::set_insert_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insert_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.insert_time)
}
inline void OrderField::set_insert_time(const char* value,
    size_t size) {
  
  insert_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.insert_time)
}
inline std::string* OrderField::_internal_mutable_insert_time() {
  
  return insert_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_insert_time() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.insert_time)
  return insert_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_insert_time(std::string* insert_time) {
  if (insert_time != nullptr) {
    
  } else {
    
  }
  insert_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.insert_time)
}

// string active_time = 28;
inline void OrderField::clear_active_time() {
  active_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::active_time() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.active_time)
  return _internal_active_time();
}
inline void OrderField::set_active_time(const std::string& value) {
  _internal_set_active_time(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.active_time)
}
inline std::string* OrderField::mutable_active_time() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.active_time)
  return _internal_mutable_active_time();
}
inline const std::string& OrderField::_internal_active_time() const {
  return active_time_.Get();
}
inline void OrderField::_internal_set_active_time(const std::string& value) {
  
  active_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_active_time(std::string&& value) {
  
  active_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.active_time)
}
inline void OrderField::set_active_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.active_time)
}
inline void OrderField::set_active_time(const char* value,
    size_t size) {
  
  active_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.active_time)
}
inline std::string* OrderField::_internal_mutable_active_time() {
  
  return active_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_active_time() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.active_time)
  return active_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_active_time(std::string* active_time) {
  if (active_time != nullptr) {
    
  } else {
    
  }
  active_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.active_time)
}

// string suspend_time = 29;
inline void OrderField::clear_suspend_time() {
  suspend_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::suspend_time() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.suspend_time)
  return _internal_suspend_time();
}
inline void OrderField::set_suspend_time(const std::string& value) {
  _internal_set_suspend_time(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.suspend_time)
}
inline std::string* OrderField::mutable_suspend_time() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.suspend_time)
  return _internal_mutable_suspend_time();
}
inline const std::string& OrderField::_internal_suspend_time() const {
  return suspend_time_.Get();
}
inline void OrderField::_internal_set_suspend_time(const std::string& value) {
  
  suspend_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_suspend_time(std::string&& value) {
  
  suspend_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.suspend_time)
}
inline void OrderField::set_suspend_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suspend_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.suspend_time)
}
inline void OrderField::set_suspend_time(const char* value,
    size_t size) {
  
  suspend_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.suspend_time)
}
inline std::string* OrderField::_internal_mutable_suspend_time() {
  
  return suspend_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_suspend_time() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.suspend_time)
  return suspend_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_suspend_time(std::string* suspend_time) {
  if (suspend_time != nullptr) {
    
  } else {
    
  }
  suspend_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suspend_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.suspend_time)
}

// string update_time = 30;
inline void OrderField::clear_update_time() {
  update_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::update_time() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.update_time)
  return _internal_update_time();
}
inline void OrderField::set_update_time(const std::string& value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.update_time)
}
inline std::string* OrderField::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.update_time)
  return _internal_mutable_update_time();
}
inline const std::string& OrderField::_internal_update_time() const {
  return update_time_.Get();
}
inline void OrderField::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_update_time(std::string&& value) {
  
  update_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.update_time)
}
inline void OrderField::set_update_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.update_time)
}
inline void OrderField::set_update_time(const char* value,
    size_t size) {
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.update_time)
}
inline std::string* OrderField::_internal_mutable_update_time() {
  
  return update_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_update_time() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.update_time)
  return update_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.update_time)
}

// string cancel_time = 31;
inline void OrderField::clear_cancel_time() {
  cancel_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::cancel_time() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.cancel_time)
  return _internal_cancel_time();
}
inline void OrderField::set_cancel_time(const std::string& value) {
  _internal_set_cancel_time(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.cancel_time)
}
inline std::string* OrderField::mutable_cancel_time() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.cancel_time)
  return _internal_mutable_cancel_time();
}
inline const std::string& OrderField::_internal_cancel_time() const {
  return cancel_time_.Get();
}
inline void OrderField::_internal_set_cancel_time(const std::string& value) {
  
  cancel_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_cancel_time(std::string&& value) {
  
  cancel_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.cancel_time)
}
inline void OrderField::set_cancel_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cancel_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.cancel_time)
}
inline void OrderField::set_cancel_time(const char* value,
    size_t size) {
  
  cancel_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.cancel_time)
}
inline std::string* OrderField::_internal_mutable_cancel_time() {
  
  return cancel_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_cancel_time() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.cancel_time)
  return cancel_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_cancel_time(std::string* cancel_time) {
  if (cancel_time != nullptr) {
    
  } else {
    
  }
  cancel_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.cancel_time)
}

// int32 front_id = 32;
inline void OrderField::clear_front_id() {
  front_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_front_id() const {
  return front_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::front_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.front_id)
  return _internal_front_id();
}
inline void OrderField::_internal_set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  front_id_ = value;
}
inline void OrderField::set_front_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_front_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.front_id)
}

// int32 session_id = 33;
inline void OrderField::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::session_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.session_id)
  return _internal_session_id();
}
inline void OrderField::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
}
inline void OrderField::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.session_id)
}

// string status_msg = 34;
inline void OrderField::clear_status_msg() {
  status_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::status_msg() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.status_msg)
  return _internal_status_msg();
}
inline void OrderField::set_status_msg(const std::string& value) {
  _internal_set_status_msg(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.status_msg)
}
inline std::string* OrderField::mutable_status_msg() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.status_msg)
  return _internal_mutable_status_msg();
}
inline const std::string& OrderField::_internal_status_msg() const {
  return status_msg_.Get();
}
inline void OrderField::_internal_set_status_msg(const std::string& value) {
  
  status_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_status_msg(std::string&& value) {
  
  status_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.status_msg)
}
inline void OrderField::set_status_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.status_msg)
}
inline void OrderField::set_status_msg(const char* value,
    size_t size) {
  
  status_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.status_msg)
}
inline std::string* OrderField::_internal_mutable_status_msg() {
  
  return status_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_status_msg() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.status_msg)
  return status_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_status_msg(std::string* status_msg) {
  if (status_msg != nullptr) {
    
  } else {
    
  }
  status_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.status_msg)
}

// int32 zce_total_traded_volume = 35;
inline void OrderField::clear_zce_total_traded_volume() {
  zce_total_traded_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::_internal_zce_total_traded_volume() const {
  return zce_total_traded_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderField::zce_total_traded_volume() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.zce_total_traded_volume)
  return _internal_zce_total_traded_volume();
}
inline void OrderField::_internal_set_zce_total_traded_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zce_total_traded_volume_ = value;
}
inline void OrderField::set_zce_total_traded_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zce_total_traded_volume(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.zce_total_traded_volume)
}

// string account_id = 36;
inline void OrderField::clear_account_id() {
  account_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::account_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.account_id)
  return _internal_account_id();
}
inline void OrderField::set_account_id(const std::string& value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.account_id)
}
inline std::string* OrderField::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.account_id)
  return _internal_mutable_account_id();
}
inline const std::string& OrderField::_internal_account_id() const {
  return account_id_.Get();
}
inline void OrderField::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_account_id(std::string&& value) {
  
  account_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.account_id)
}
inline void OrderField::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.account_id)
}
inline void OrderField::set_account_id(const char* value,
    size_t size) {
  
  account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.account_id)
}
inline std::string* OrderField::_internal_mutable_account_id() {
  
  return account_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_account_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.account_id)
  return account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.account_id)
}

// string currency_id = 37;
inline void OrderField::clear_currency_id() {
  currency_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderField::currency_id() const {
  // @@protoc_insertion_point(field_get:rtn.OrderField.currency_id)
  return _internal_currency_id();
}
inline void OrderField::set_currency_id(const std::string& value) {
  _internal_set_currency_id(value);
  // @@protoc_insertion_point(field_set:rtn.OrderField.currency_id)
}
inline std::string* OrderField::mutable_currency_id() {
  // @@protoc_insertion_point(field_mutable:rtn.OrderField.currency_id)
  return _internal_mutable_currency_id();
}
inline const std::string& OrderField::_internal_currency_id() const {
  return currency_id_.Get();
}
inline void OrderField::_internal_set_currency_id(const std::string& value) {
  
  currency_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderField::set_currency_id(std::string&& value) {
  
  currency_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.OrderField.currency_id)
}
inline void OrderField::set_currency_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.OrderField.currency_id)
}
inline void OrderField::set_currency_id(const char* value,
    size_t size) {
  
  currency_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.OrderField.currency_id)
}
inline std::string* OrderField::_internal_mutable_currency_id() {
  
  return currency_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderField::release_currency_id() {
  // @@protoc_insertion_point(field_release:rtn.OrderField.currency_id)
  return currency_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderField::set_allocated_currency_id(std::string* currency_id) {
  if (currency_id != nullptr) {
    
  } else {
    
  }
  currency_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.OrderField.currency_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rtn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Rtn_2eOrder_2eproto

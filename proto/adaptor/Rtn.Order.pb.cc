// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rtn.Order.proto

#include "Rtn.Order.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rtn {
class OrderFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderField> _instance;
} _OrderField_default_instance_;
}  // namespace rtn
static void InitDefaultsscc_info_OrderField_Rtn_2eOrder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rtn::_OrderField_default_instance_;
    new (ptr) ::rtn::OrderField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rtn::OrderField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderField_Rtn_2eOrder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderField_Rtn_2eOrder_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Rtn_2eOrder_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Rtn_2eOrder_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Rtn_2eOrder_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Rtn_2eOrder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, broker_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, investor_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, order_ref_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, user_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, direction_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, comb_offset_flag_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, comb_hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, limit_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, volume_total_original_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, time_condition_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, volume_condition_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, min_volume_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, contigent_condition_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, stop_price_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, is_auto_suspend_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, request_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, order_local_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, order_submit_status_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, trading_day_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, order_status_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, volume_traded_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, volume_total_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, insert_date_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, insert_time_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, active_time_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, suspend_time_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, update_time_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, cancel_time_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, front_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, session_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, status_msg_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, zce_total_traded_volume_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, account_id_),
  PROTOBUF_FIELD_OFFSET(::rtn::OrderField, currency_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rtn::OrderField)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rtn::_OrderField_default_instance_),
};

const char descriptor_table_protodef_Rtn_2eOrder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Rtn.Order.proto\022\003rtn\"\310\006\n\nOrderField\022\021\n"
  "\tbroker_id\030\001 \001(\t\022\023\n\013investor_id\030\002 \001(\t\022\025\n"
  "\rinstrument_id\030\003 \001(\t\022\021\n\torder_ref\030\004 \001(\t\022"
  "\017\n\007user_id\030\005 \001(\t\022\021\n\tdirection\030\006 \001(\005\022\030\n\020c"
  "omb_offset_flag\030\007 \001(\005\022\027\n\017comb_hedge_flag"
  "\030\010 \001(\005\022\023\n\013limit_price\030\t \001(\001\022\035\n\025volume_to"
  "tal_original\030\n \001(\005\022\026\n\016time_condition\030\013 \001"
  "(\005\022\030\n\020volume_condition\030\014 \001(\005\022\022\n\nmin_volu"
  "me\030\r \001(\005\022\033\n\023contigent_condition\030\016 \001(\005\022\022\n"
  "\nstop_price\030\017 \001(\001\022\027\n\017is_auto_suspend\030\020 \001"
  "(\005\022\022\n\nrequest_id\030\021 \001(\005\022\026\n\016order_local_id"
  "\030\022 \001(\t\022\023\n\013exchange_id\030\023 \001(\t\022\033\n\023order_sub"
  "mit_status\030\024 \001(\005\022\023\n\013trading_day\030\025 \001(\t\022\024\n"
  "\014order_sys_id\030\026 \001(\t\022\024\n\014order_status\030\027 \001("
  "\005\022\025\n\rvolume_traded\030\030 \001(\005\022\024\n\014volume_total"
  "\030\031 \001(\005\022\023\n\013insert_date\030\032 \001(\t\022\023\n\013insert_ti"
  "me\030\033 \001(\t\022\023\n\013active_time\030\034 \001(\t\022\024\n\014suspend"
  "_time\030\035 \001(\t\022\023\n\013update_time\030\036 \001(\t\022\023\n\013canc"
  "el_time\030\037 \001(\t\022\020\n\010front_id\030  \001(\005\022\022\n\nsessi"
  "on_id\030! \001(\005\022\022\n\nstatus_msg\030\" \001(\t\022\037\n\027zce_t"
  "otal_traded_volume\030# \001(\005\022\022\n\naccount_id\030$"
  " \001(\t\022\023\n\013currency_id\030% \001(\tB=\n\025io.evelynn."
  "base.protoB\017OrderFieldProto\252\002\022Evelynn.Ba"
  "se.Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Rtn_2eOrder_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Rtn_2eOrder_2eproto_sccs[1] = {
  &scc_info_OrderField_Rtn_2eOrder_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Rtn_2eOrder_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rtn_2eOrder_2eproto = {
  false, false, descriptor_table_protodef_Rtn_2eOrder_2eproto, "Rtn.Order.proto", 936,
  &descriptor_table_Rtn_2eOrder_2eproto_once, descriptor_table_Rtn_2eOrder_2eproto_sccs, descriptor_table_Rtn_2eOrder_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_Rtn_2eOrder_2eproto::offsets,
  file_level_metadata_Rtn_2eOrder_2eproto, 1, file_level_enum_descriptors_Rtn_2eOrder_2eproto, file_level_service_descriptors_Rtn_2eOrder_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Rtn_2eOrder_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Rtn_2eOrder_2eproto)), true);
namespace rtn {

// ===================================================================

void OrderField::InitAsDefaultInstance() {
}
class OrderField::_Internal {
 public:
};

OrderField::OrderField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rtn.OrderField)
}
OrderField::OrderField(const OrderField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_broker_id().empty()) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_broker_id(),
      GetArena());
  }
  investor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_investor_id().empty()) {
    investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_investor_id(),
      GetArena());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  order_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_ref().empty()) {
    order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_order_ref(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  order_local_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_local_id().empty()) {
    order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_order_local_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trading_day(),
      GetArena());
  }
  order_sys_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_order_sys_id(),
      GetArena());
  }
  insert_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_insert_date().empty()) {
    insert_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_insert_date(),
      GetArena());
  }
  insert_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_insert_time().empty()) {
    insert_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_insert_time(),
      GetArena());
  }
  active_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_active_time().empty()) {
    active_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_active_time(),
      GetArena());
  }
  suspend_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suspend_time().empty()) {
    suspend_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suspend_time(),
      GetArena());
  }
  update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_update_time().empty()) {
    update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_update_time(),
      GetArena());
  }
  cancel_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cancel_time().empty()) {
    cancel_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cancel_time(),
      GetArena());
  }
  status_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status_msg().empty()) {
    status_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status_msg(),
      GetArena());
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_account_id(),
      GetArena());
  }
  currency_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency_id().empty()) {
    currency_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_currency_id(),
      GetArena());
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&zce_total_traded_volume_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(zce_total_traded_volume_));
  // @@protoc_insertion_point(copy_constructor:rtn.OrderField)
}

void OrderField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderField_Rtn_2eOrder_2eproto.base);
  broker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  investor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_local_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insert_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insert_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suspend_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cancel_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zce_total_traded_volume_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(zce_total_traded_volume_));
}

OrderField::~OrderField() {
  // @@protoc_insertion_point(destructor:rtn.OrderField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  broker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  investor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_local_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_sys_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insert_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insert_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suspend_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cancel_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderField::ArenaDtor(void* object) {
  OrderField* _this = reinterpret_cast< OrderField* >(object);
  (void)_this;
}
void OrderField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderField& OrderField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderField_Rtn_2eOrder_2eproto.base);
  return *internal_default_instance();
}


void OrderField::Clear() {
// @@protoc_insertion_point(message_clear_start:rtn.OrderField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  investor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_local_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_sys_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  insert_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  insert_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  active_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suspend_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cancel_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currency_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zce_total_traded_volume_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(zce_total_traded_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string broker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_broker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.broker_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string investor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_investor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.investor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_order_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.order_ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 comb_offset_flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          comb_offset_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 comb_hedge_flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          comb_hedge_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double limit_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume_total_original = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          volume_total_original_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_condition = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          time_condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume_condition = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          volume_condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_volume = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          min_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 contigent_condition = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          contigent_condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double stop_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          stop_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 is_auto_suspend = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          is_auto_suspend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 request_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_local_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_order_local_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.order_local_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 order_submit_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          order_submit_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trading_day = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.trading_day"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_sys_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.order_sys_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 order_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          order_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume_traded = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          volume_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume_total = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          volume_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string insert_date = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_insert_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.insert_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string insert_time = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_insert_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.insert_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string active_time = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_active_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.active_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suspend_time = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_suspend_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.suspend_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string update_time = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_update_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.update_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cancel_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_cancel_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.cancel_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 front_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          front_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status_msg = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.status_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zce_total_traded_volume = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          zce_total_traded_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_id = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currency_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_currency_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rtn.OrderField.currency_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rtn.OrderField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_id().data(), static_cast<int>(this->_internal_broker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.broker_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_broker_id(), target);
  }

  // string investor_id = 2;
  if (this->investor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_investor_id().data(), static_cast<int>(this->_internal_investor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.investor_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_investor_id(), target);
  }

  // string instrument_id = 3;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.instrument_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_id(), target);
  }

  // string order_ref = 4;
  if (this->order_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_ref().data(), static_cast<int>(this->_internal_order_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.order_ref");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_order_ref(), target);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // int32 direction = 6;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_direction(), target);
  }

  // int32 comb_offset_flag = 7;
  if (this->comb_offset_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_comb_offset_flag(), target);
  }

  // int32 comb_hedge_flag = 8;
  if (this->comb_hedge_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_comb_hedge_flag(), target);
  }

  // double limit_price = 9;
  if (!(this->limit_price() <= 0 && this->limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_limit_price(), target);
  }

  // int32 volume_total_original = 10;
  if (this->volume_total_original() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_volume_total_original(), target);
  }

  // int32 time_condition = 11;
  if (this->time_condition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_time_condition(), target);
  }

  // int32 volume_condition = 12;
  if (this->volume_condition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_volume_condition(), target);
  }

  // int32 min_volume = 13;
  if (this->min_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_min_volume(), target);
  }

  // int32 contigent_condition = 14;
  if (this->contigent_condition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_contigent_condition(), target);
  }

  // double stop_price = 15;
  if (!(this->stop_price() <= 0 && this->stop_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_stop_price(), target);
  }

  // int32 is_auto_suspend = 16;
  if (this->is_auto_suspend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_is_auto_suspend(), target);
  }

  // int32 request_id = 17;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_request_id(), target);
  }

  // string order_local_id = 18;
  if (this->order_local_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_local_id().data(), static_cast<int>(this->_internal_order_local_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.order_local_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_order_local_id(), target);
  }

  // string exchange_id = 19;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.exchange_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_exchange_id(), target);
  }

  // int32 order_submit_status = 20;
  if (this->order_submit_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_order_submit_status(), target);
  }

  // string trading_day = 21;
  if (this->trading_day().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.trading_day");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_trading_day(), target);
  }

  // string order_sys_id = 22;
  if (this->order_sys_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_order_sys_id(), target);
  }

  // int32 order_status = 23;
  if (this->order_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_order_status(), target);
  }

  // int32 volume_traded = 24;
  if (this->volume_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_volume_traded(), target);
  }

  // int32 volume_total = 25;
  if (this->volume_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_volume_total(), target);
  }

  // string insert_date = 26;
  if (this->insert_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_date().data(), static_cast<int>(this->_internal_insert_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.insert_date");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_insert_date(), target);
  }

  // string insert_time = 27;
  if (this->insert_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_time().data(), static_cast<int>(this->_internal_insert_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.insert_time");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_insert_time(), target);
  }

  // string active_time = 28;
  if (this->active_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_active_time().data(), static_cast<int>(this->_internal_active_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.active_time");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_active_time(), target);
  }

  // string suspend_time = 29;
  if (this->suspend_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suspend_time().data(), static_cast<int>(this->_internal_suspend_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.suspend_time");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_suspend_time(), target);
  }

  // string update_time = 30;
  if (this->update_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.update_time");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_update_time(), target);
  }

  // string cancel_time = 31;
  if (this->cancel_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancel_time().data(), static_cast<int>(this->_internal_cancel_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.cancel_time");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_cancel_time(), target);
  }

  // int32 front_id = 32;
  if (this->front_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_front_id(), target);
  }

  // int32 session_id = 33;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_session_id(), target);
  }

  // string status_msg = 34;
  if (this->status_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_msg().data(), static_cast<int>(this->_internal_status_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.status_msg");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_status_msg(), target);
  }

  // int32 zce_total_traded_volume = 35;
  if (this->zce_total_traded_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_zce_total_traded_volume(), target);
  }

  // string account_id = 36;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.account_id");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_account_id(), target);
  }

  // string currency_id = 37;
  if (this->currency_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency_id().data(), static_cast<int>(this->_internal_currency_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rtn.OrderField.currency_id");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_currency_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rtn.OrderField)
  return target;
}

size_t OrderField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rtn.OrderField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_id());
  }

  // string investor_id = 2;
  if (this->investor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_investor_id());
  }

  // string instrument_id = 3;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string order_ref = 4;
  if (this->order_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_ref());
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string order_local_id = 18;
  if (this->order_local_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_local_id());
  }

  // string exchange_id = 19;
  if (this->exchange_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string trading_day = 21;
  if (this->trading_day().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string order_sys_id = 22;
  if (this->order_sys_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string insert_date = 26;
  if (this->insert_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_date());
  }

  // string insert_time = 27;
  if (this->insert_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_time());
  }

  // string active_time = 28;
  if (this->active_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_active_time());
  }

  // string suspend_time = 29;
  if (this->suspend_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suspend_time());
  }

  // string update_time = 30;
  if (this->update_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // string cancel_time = 31;
  if (this->cancel_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancel_time());
  }

  // string status_msg = 34;
  if (this->status_msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_msg());
  }

  // string account_id = 36;
  if (this->account_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string currency_id = 37;
  if (this->currency_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_id());
  }

  // int32 direction = 6;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  // int32 comb_offset_flag = 7;
  if (this->comb_offset_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_comb_offset_flag());
  }

  // double limit_price = 9;
  if (!(this->limit_price() <= 0 && this->limit_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 comb_hedge_flag = 8;
  if (this->comb_hedge_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_comb_hedge_flag());
  }

  // int32 volume_total_original = 10;
  if (this->volume_total_original() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume_total_original());
  }

  // int32 time_condition = 11;
  if (this->time_condition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_condition());
  }

  // int32 volume_condition = 12;
  if (this->volume_condition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume_condition());
  }

  // int32 min_volume = 13;
  if (this->min_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_volume());
  }

  // int32 contigent_condition = 14;
  if (this->contigent_condition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contigent_condition());
  }

  // double stop_price = 15;
  if (!(this->stop_price() <= 0 && this->stop_price() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 is_auto_suspend = 16;
  if (this->is_auto_suspend() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_auto_suspend());
  }

  // int32 request_id = 17;
  if (this->request_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_request_id());
  }

  // int32 order_submit_status = 20;
  if (this->order_submit_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order_submit_status());
  }

  // int32 order_status = 23;
  if (this->order_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order_status());
  }

  // int32 volume_traded = 24;
  if (this->volume_traded() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume_traded());
  }

  // int32 volume_total = 25;
  if (this->volume_total() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume_total());
  }

  // int32 front_id = 32;
  if (this->front_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_front_id());
  }

  // int32 session_id = 33;
  if (this->session_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  // int32 zce_total_traded_volume = 35;
  if (this->zce_total_traded_volume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zce_total_traded_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rtn.OrderField)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rtn.OrderField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rtn.OrderField)
    MergeFrom(*source);
  }
}

void OrderField::MergeFrom(const OrderField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rtn.OrderField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.broker_id().size() > 0) {
    _internal_set_broker_id(from._internal_broker_id());
  }
  if (from.investor_id().size() > 0) {
    _internal_set_investor_id(from._internal_investor_id());
  }
  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.order_ref().size() > 0) {
    _internal_set_order_ref(from._internal_order_ref());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.order_local_id().size() > 0) {
    _internal_set_order_local_id(from._internal_order_local_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.trading_day().size() > 0) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (from.order_sys_id().size() > 0) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (from.insert_date().size() > 0) {
    _internal_set_insert_date(from._internal_insert_date());
  }
  if (from.insert_time().size() > 0) {
    _internal_set_insert_time(from._internal_insert_time());
  }
  if (from.active_time().size() > 0) {
    _internal_set_active_time(from._internal_active_time());
  }
  if (from.suspend_time().size() > 0) {
    _internal_set_suspend_time(from._internal_suspend_time());
  }
  if (from.update_time().size() > 0) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (from.cancel_time().size() > 0) {
    _internal_set_cancel_time(from._internal_cancel_time());
  }
  if (from.status_msg().size() > 0) {
    _internal_set_status_msg(from._internal_status_msg());
  }
  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.currency_id().size() > 0) {
    _internal_set_currency_id(from._internal_currency_id());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.comb_offset_flag() != 0) {
    _internal_set_comb_offset_flag(from._internal_comb_offset_flag());
  }
  if (!(from.limit_price() <= 0 && from.limit_price() >= 0)) {
    _internal_set_limit_price(from._internal_limit_price());
  }
  if (from.comb_hedge_flag() != 0) {
    _internal_set_comb_hedge_flag(from._internal_comb_hedge_flag());
  }
  if (from.volume_total_original() != 0) {
    _internal_set_volume_total_original(from._internal_volume_total_original());
  }
  if (from.time_condition() != 0) {
    _internal_set_time_condition(from._internal_time_condition());
  }
  if (from.volume_condition() != 0) {
    _internal_set_volume_condition(from._internal_volume_condition());
  }
  if (from.min_volume() != 0) {
    _internal_set_min_volume(from._internal_min_volume());
  }
  if (from.contigent_condition() != 0) {
    _internal_set_contigent_condition(from._internal_contigent_condition());
  }
  if (!(from.stop_price() <= 0 && from.stop_price() >= 0)) {
    _internal_set_stop_price(from._internal_stop_price());
  }
  if (from.is_auto_suspend() != 0) {
    _internal_set_is_auto_suspend(from._internal_is_auto_suspend());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.order_submit_status() != 0) {
    _internal_set_order_submit_status(from._internal_order_submit_status());
  }
  if (from.order_status() != 0) {
    _internal_set_order_status(from._internal_order_status());
  }
  if (from.volume_traded() != 0) {
    _internal_set_volume_traded(from._internal_volume_traded());
  }
  if (from.volume_total() != 0) {
    _internal_set_volume_total(from._internal_volume_total());
  }
  if (from.front_id() != 0) {
    _internal_set_front_id(from._internal_front_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.zce_total_traded_volume() != 0) {
    _internal_set_zce_total_traded_volume(from._internal_zce_total_traded_volume());
  }
}

void OrderField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rtn.OrderField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderField::CopyFrom(const OrderField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rtn.OrderField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderField::IsInitialized() const {
  return true;
}

void OrderField::InternalSwap(OrderField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  broker_id_.Swap(&other->broker_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  investor_id_.Swap(&other->investor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_ref_.Swap(&other->order_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_local_id_.Swap(&other->order_local_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_day_.Swap(&other->trading_day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_sys_id_.Swap(&other->order_sys_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  insert_date_.Swap(&other->insert_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  insert_time_.Swap(&other->insert_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  active_time_.Swap(&other->active_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suspend_time_.Swap(&other->suspend_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_time_.Swap(&other->update_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cancel_time_.Swap(&other->cancel_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_msg_.Swap(&other->status_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currency_id_.Swap(&other->currency_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderField, zce_total_traded_volume_)
      + sizeof(OrderField::zce_total_traded_volume_)
      - PROTOBUF_FIELD_OFFSET(OrderField, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderField::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rtn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rtn::OrderField* Arena::CreateMaybeMessage< ::rtn::OrderField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rtn::OrderField >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.Qry.CommissionRate.proto

#include "Msg.Qry.CommissionRate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Qry_2eCommissionRate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QryCommissionRateField_Qry_2eCommissionRate_2eproto;
namespace msg {
namespace qry {
class QryCommissionRateMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QryCommissionRateMsg> _instance;
} _QryCommissionRateMsg_default_instance_;
}  // namespace qry
}  // namespace msg
static void InitDefaultsscc_info_QryCommissionRateMsg_Msg_2eQry_2eCommissionRate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::qry::_QryCommissionRateMsg_default_instance_;
    new (ptr) ::msg::qry::QryCommissionRateMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::qry::QryCommissionRateMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QryCommissionRateMsg_Msg_2eQry_2eCommissionRate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QryCommissionRateMsg_Msg_2eQry_2eCommissionRate_2eproto}, {
      &scc_info_QryCommissionRateField_Qry_2eCommissionRate_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Msg_2eQry_2eCommissionRate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Msg_2eQry_2eCommissionRate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Msg_2eQry_2eCommissionRate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Msg_2eQry_2eCommissionRate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::qry::QryCommissionRateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::qry::QryCommissionRateMsg, commission_rate_),
  PROTOBUF_FIELD_OFFSET(::msg::qry::QryCommissionRateMsg, request_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::msg::qry::QryCommissionRateMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::qry::_QryCommissionRateMsg_default_instance_),
};

const char descriptor_table_protodef_Msg_2eQry_2eCommissionRate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034Msg.Qry.CommissionRate.proto\022\007msg.qry\032"
  "\030Qry.CommissionRate.proto\"`\n\024QryCommissi"
  "onRateMsg\0224\n\017commission_rate\030\001 \001(\0132\033.qry"
  ".QryCommissionRateField\022\022\n\nrequest_id\030\002 "
  "\001(\005BG\n\025io.evelynn.base.protoB\031QryCommiss"
  "ionRateMsgProto\252\002\022Evelynn.Base.Protob\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Msg_2eQry_2eCommissionRate_2eproto_deps[1] = {
  &::descriptor_table_Qry_2eCommissionRate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Msg_2eQry_2eCommissionRate_2eproto_sccs[1] = {
  &scc_info_QryCommissionRateMsg_Msg_2eQry_2eCommissionRate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Msg_2eQry_2eCommissionRate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_2eQry_2eCommissionRate_2eproto = {
  false, false, descriptor_table_protodef_Msg_2eQry_2eCommissionRate_2eproto, "Msg.Qry.CommissionRate.proto", 244,
  &descriptor_table_Msg_2eQry_2eCommissionRate_2eproto_once, descriptor_table_Msg_2eQry_2eCommissionRate_2eproto_sccs, descriptor_table_Msg_2eQry_2eCommissionRate_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_Msg_2eQry_2eCommissionRate_2eproto::offsets,
  file_level_metadata_Msg_2eQry_2eCommissionRate_2eproto, 1, file_level_enum_descriptors_Msg_2eQry_2eCommissionRate_2eproto, file_level_service_descriptors_Msg_2eQry_2eCommissionRate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Msg_2eQry_2eCommissionRate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Msg_2eQry_2eCommissionRate_2eproto)), true);
namespace msg {
namespace qry {

// ===================================================================

void QryCommissionRateMsg::InitAsDefaultInstance() {
  ::msg::qry::_QryCommissionRateMsg_default_instance_._instance.get_mutable()->commission_rate_ = const_cast< ::qry::QryCommissionRateField*>(
      ::qry::QryCommissionRateField::internal_default_instance());
}
class QryCommissionRateMsg::_Internal {
 public:
  static const ::qry::QryCommissionRateField& commission_rate(const QryCommissionRateMsg* msg);
};

const ::qry::QryCommissionRateField&
QryCommissionRateMsg::_Internal::commission_rate(const QryCommissionRateMsg* msg) {
  return *msg->commission_rate_;
}
void QryCommissionRateMsg::clear_commission_rate() {
  if (GetArena() == nullptr && commission_rate_ != nullptr) {
    delete commission_rate_;
  }
  commission_rate_ = nullptr;
}
QryCommissionRateMsg::QryCommissionRateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.qry.QryCommissionRateMsg)
}
QryCommissionRateMsg::QryCommissionRateMsg(const QryCommissionRateMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commission_rate()) {
    commission_rate_ = new ::qry::QryCommissionRateField(*from.commission_rate_);
  } else {
    commission_rate_ = nullptr;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:msg.qry.QryCommissionRateMsg)
}

void QryCommissionRateMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QryCommissionRateMsg_Msg_2eQry_2eCommissionRate_2eproto.base);
  ::memset(&commission_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&commission_rate_)) + sizeof(request_id_));
}

QryCommissionRateMsg::~QryCommissionRateMsg() {
  // @@protoc_insertion_point(destructor:msg.qry.QryCommissionRateMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QryCommissionRateMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete commission_rate_;
}

void QryCommissionRateMsg::ArenaDtor(void* object) {
  QryCommissionRateMsg* _this = reinterpret_cast< QryCommissionRateMsg* >(object);
  (void)_this;
}
void QryCommissionRateMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QryCommissionRateMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QryCommissionRateMsg& QryCommissionRateMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QryCommissionRateMsg_Msg_2eQry_2eCommissionRate_2eproto.base);
  return *internal_default_instance();
}


void QryCommissionRateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.qry.QryCommissionRateMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && commission_rate_ != nullptr) {
    delete commission_rate_;
  }
  commission_rate_ = nullptr;
  request_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QryCommissionRateMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .qry.QryCommissionRateField commission_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commission_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QryCommissionRateMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.qry.QryCommissionRateMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .qry.QryCommissionRateField commission_rate = 1;
  if (this->has_commission_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::commission_rate(this), target, stream);
  }

  // int32 request_id = 2;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.qry.QryCommissionRateMsg)
  return target;
}

size_t QryCommissionRateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.qry.QryCommissionRateMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .qry.QryCommissionRateField commission_rate = 1;
  if (this->has_commission_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commission_rate_);
  }

  // int32 request_id = 2;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QryCommissionRateMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.qry.QryCommissionRateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const QryCommissionRateMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QryCommissionRateMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.qry.QryCommissionRateMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.qry.QryCommissionRateMsg)
    MergeFrom(*source);
  }
}

void QryCommissionRateMsg::MergeFrom(const QryCommissionRateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.qry.QryCommissionRateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commission_rate()) {
    _internal_mutable_commission_rate()->::qry::QryCommissionRateField::MergeFrom(from._internal_commission_rate());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
}

void QryCommissionRateMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.qry.QryCommissionRateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QryCommissionRateMsg::CopyFrom(const QryCommissionRateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.qry.QryCommissionRateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QryCommissionRateMsg::IsInitialized() const {
  return true;
}

void QryCommissionRateMsg::InternalSwap(QryCommissionRateMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QryCommissionRateMsg, request_id_)
      + sizeof(QryCommissionRateMsg::request_id_)
      - PROTOBUF_FIELD_OFFSET(QryCommissionRateMsg, commission_rate_)>(
          reinterpret_cast<char*>(&commission_rate_),
          reinterpret_cast<char*>(&other->commission_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QryCommissionRateMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace qry
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::qry::QryCommissionRateMsg* Arena::CreateMaybeMessage< ::msg::qry::QryCommissionRateMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::qry::QryCommissionRateMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

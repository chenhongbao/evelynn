// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rsp.CommissionRate.proto

#include "Rsp.CommissionRate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rsp {
class CommissionRateFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommissionRateField> _instance;
} _CommissionRateField_default_instance_;
}  // namespace rsp
static void InitDefaultsscc_info_CommissionRateField_Rsp_2eCommissionRate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rsp::_CommissionRateField_default_instance_;
    new (ptr) ::rsp::CommissionRateField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsp::CommissionRateField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommissionRateField_Rsp_2eCommissionRate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommissionRateField_Rsp_2eCommissionRate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Rsp_2eCommissionRate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Rsp_2eCommissionRate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Rsp_2eCommissionRate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Rsp_2eCommissionRate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, broker_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, investor_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, open_ratio_by_money_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, open_ratio_by_volume_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, close_ratio_by_money_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, close_ratio_by_volume_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, close_today_ratio_by_money_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, close_today_ratio_by_volume_),
  PROTOBUF_FIELD_OFFSET(::rsp::CommissionRateField, exchange_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rsp::CommissionRateField)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rsp::_CommissionRateField_default_instance_),
};

const char descriptor_table_protodef_Rsp_2eCommissionRate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030Rsp.CommissionRate.proto\022\003rsp\"\252\002\n\023Comm"
  "issionRateField\022\025\n\rinstrument_id\030\001 \001(\t\022\021"
  "\n\tbroker_id\030\002 \001(\t\022\023\n\013investor_id\030\003 \001(\t\022\033"
  "\n\023open_ratio_by_money\030\004 \001(\001\022\034\n\024open_rati"
  "o_by_volume\030\005 \001(\001\022\034\n\024close_ratio_by_mone"
  "y\030\006 \001(\001\022\035\n\025close_ratio_by_volume\030\007 \001(\001\022\""
  "\n\032close_today_ratio_by_money\030\010 \001(\001\022#\n\033cl"
  "ose_today_ratio_by_volume\030\t \001(\001\022\023\n\013excha"
  "nge_id\030\n \001(\tBF\n\025io.evelynn.base.protoB\030C"
  "ommissionRateFieldProto\252\002\022Evelynn.Base.P"
  "rotob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Rsp_2eCommissionRate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Rsp_2eCommissionRate_2eproto_sccs[1] = {
  &scc_info_CommissionRateField_Rsp_2eCommissionRate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Rsp_2eCommissionRate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rsp_2eCommissionRate_2eproto = {
  false, false, descriptor_table_protodef_Rsp_2eCommissionRate_2eproto, "Rsp.CommissionRate.proto", 412,
  &descriptor_table_Rsp_2eCommissionRate_2eproto_once, descriptor_table_Rsp_2eCommissionRate_2eproto_sccs, descriptor_table_Rsp_2eCommissionRate_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_Rsp_2eCommissionRate_2eproto::offsets,
  file_level_metadata_Rsp_2eCommissionRate_2eproto, 1, file_level_enum_descriptors_Rsp_2eCommissionRate_2eproto, file_level_service_descriptors_Rsp_2eCommissionRate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Rsp_2eCommissionRate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Rsp_2eCommissionRate_2eproto)), true);
namespace rsp {

// ===================================================================

void CommissionRateField::InitAsDefaultInstance() {
}
class CommissionRateField::_Internal {
 public:
};

CommissionRateField::CommissionRateField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rsp.CommissionRateField)
}
CommissionRateField::CommissionRateField(const CommissionRateField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  broker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_broker_id().empty()) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_broker_id(),
      GetArena());
  }
  investor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_investor_id().empty()) {
    investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_investor_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  ::memcpy(&open_ratio_by_money_, &from.open_ratio_by_money_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_today_ratio_by_volume_) -
    reinterpret_cast<char*>(&open_ratio_by_money_)) + sizeof(close_today_ratio_by_volume_));
  // @@protoc_insertion_point(copy_constructor:rsp.CommissionRateField)
}

void CommissionRateField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommissionRateField_Rsp_2eCommissionRate_2eproto.base);
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  investor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&open_ratio_by_money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_today_ratio_by_volume_) -
      reinterpret_cast<char*>(&open_ratio_by_money_)) + sizeof(close_today_ratio_by_volume_));
}

CommissionRateField::~CommissionRateField() {
  // @@protoc_insertion_point(destructor:rsp.CommissionRateField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommissionRateField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  investor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommissionRateField::ArenaDtor(void* object) {
  CommissionRateField* _this = reinterpret_cast< CommissionRateField* >(object);
  (void)_this;
}
void CommissionRateField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommissionRateField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommissionRateField& CommissionRateField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommissionRateField_Rsp_2eCommissionRate_2eproto.base);
  return *internal_default_instance();
}


void CommissionRateField::Clear() {
// @@protoc_insertion_point(message_clear_start:rsp.CommissionRateField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  investor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&open_ratio_by_money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_today_ratio_by_volume_) -
      reinterpret_cast<char*>(&open_ratio_by_money_)) + sizeof(close_today_ratio_by_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommissionRateField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.CommissionRateField.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string broker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_broker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.CommissionRateField.broker_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string investor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_investor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.CommissionRateField.investor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open_ratio_by_money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          open_ratio_by_money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double open_ratio_by_volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          open_ratio_by_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_ratio_by_money = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          close_ratio_by_money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_ratio_by_volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          close_ratio_by_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_today_ratio_by_money = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          close_today_ratio_by_money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_today_ratio_by_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          close_today_ratio_by_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.CommissionRateField.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommissionRateField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsp.CommissionRateField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.CommissionRateField.instrument_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument_id(), target);
  }

  // string broker_id = 2;
  if (this->broker_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_id().data(), static_cast<int>(this->_internal_broker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.CommissionRateField.broker_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_broker_id(), target);
  }

  // string investor_id = 3;
  if (this->investor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_investor_id().data(), static_cast<int>(this->_internal_investor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.CommissionRateField.investor_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_investor_id(), target);
  }

  // double open_ratio_by_money = 4;
  if (!(this->open_ratio_by_money() <= 0 && this->open_ratio_by_money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_open_ratio_by_money(), target);
  }

  // double open_ratio_by_volume = 5;
  if (!(this->open_ratio_by_volume() <= 0 && this->open_ratio_by_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_open_ratio_by_volume(), target);
  }

  // double close_ratio_by_money = 6;
  if (!(this->close_ratio_by_money() <= 0 && this->close_ratio_by_money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_close_ratio_by_money(), target);
  }

  // double close_ratio_by_volume = 7;
  if (!(this->close_ratio_by_volume() <= 0 && this->close_ratio_by_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_close_ratio_by_volume(), target);
  }

  // double close_today_ratio_by_money = 8;
  if (!(this->close_today_ratio_by_money() <= 0 && this->close_today_ratio_by_money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_close_today_ratio_by_money(), target);
  }

  // double close_today_ratio_by_volume = 9;
  if (!(this->close_today_ratio_by_volume() <= 0 && this->close_today_ratio_by_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_close_today_ratio_by_volume(), target);
  }

  // string exchange_id = 10;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.CommissionRateField.exchange_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_exchange_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsp.CommissionRateField)
  return target;
}

size_t CommissionRateField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsp.CommissionRateField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string broker_id = 2;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_id());
  }

  // string investor_id = 3;
  if (this->investor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_investor_id());
  }

  // string exchange_id = 10;
  if (this->exchange_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // double open_ratio_by_money = 4;
  if (!(this->open_ratio_by_money() <= 0 && this->open_ratio_by_money() >= 0)) {
    total_size += 1 + 8;
  }

  // double open_ratio_by_volume = 5;
  if (!(this->open_ratio_by_volume() <= 0 && this->open_ratio_by_volume() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_ratio_by_money = 6;
  if (!(this->close_ratio_by_money() <= 0 && this->close_ratio_by_money() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_ratio_by_volume = 7;
  if (!(this->close_ratio_by_volume() <= 0 && this->close_ratio_by_volume() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_today_ratio_by_money = 8;
  if (!(this->close_today_ratio_by_money() <= 0 && this->close_today_ratio_by_money() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_today_ratio_by_volume = 9;
  if (!(this->close_today_ratio_by_volume() <= 0 && this->close_today_ratio_by_volume() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommissionRateField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsp.CommissionRateField)
  GOOGLE_DCHECK_NE(&from, this);
  const CommissionRateField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommissionRateField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsp.CommissionRateField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsp.CommissionRateField)
    MergeFrom(*source);
  }
}

void CommissionRateField::MergeFrom(const CommissionRateField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsp.CommissionRateField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.broker_id().size() > 0) {
    _internal_set_broker_id(from._internal_broker_id());
  }
  if (from.investor_id().size() > 0) {
    _internal_set_investor_id(from._internal_investor_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!(from.open_ratio_by_money() <= 0 && from.open_ratio_by_money() >= 0)) {
    _internal_set_open_ratio_by_money(from._internal_open_ratio_by_money());
  }
  if (!(from.open_ratio_by_volume() <= 0 && from.open_ratio_by_volume() >= 0)) {
    _internal_set_open_ratio_by_volume(from._internal_open_ratio_by_volume());
  }
  if (!(from.close_ratio_by_money() <= 0 && from.close_ratio_by_money() >= 0)) {
    _internal_set_close_ratio_by_money(from._internal_close_ratio_by_money());
  }
  if (!(from.close_ratio_by_volume() <= 0 && from.close_ratio_by_volume() >= 0)) {
    _internal_set_close_ratio_by_volume(from._internal_close_ratio_by_volume());
  }
  if (!(from.close_today_ratio_by_money() <= 0 && from.close_today_ratio_by_money() >= 0)) {
    _internal_set_close_today_ratio_by_money(from._internal_close_today_ratio_by_money());
  }
  if (!(from.close_today_ratio_by_volume() <= 0 && from.close_today_ratio_by_volume() >= 0)) {
    _internal_set_close_today_ratio_by_volume(from._internal_close_today_ratio_by_volume());
  }
}

void CommissionRateField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsp.CommissionRateField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommissionRateField::CopyFrom(const CommissionRateField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsp.CommissionRateField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommissionRateField::IsInitialized() const {
  return true;
}

void CommissionRateField::InternalSwap(CommissionRateField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broker_id_.Swap(&other->broker_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  investor_id_.Swap(&other->investor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommissionRateField, close_today_ratio_by_volume_)
      + sizeof(CommissionRateField::close_today_ratio_by_volume_)
      - PROTOBUF_FIELD_OFFSET(CommissionRateField, open_ratio_by_money_)>(
          reinterpret_cast<char*>(&open_ratio_by_money_),
          reinterpret_cast<char*>(&other->open_ratio_by_money_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommissionRateField::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rsp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rsp::CommissionRateField* Arena::CreateMaybeMessage< ::rsp::CommissionRateField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsp::CommissionRateField >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rsp.Instrument.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Rsp_2eInstrument_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Rsp_2eInstrument_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Rsp_2eInstrument_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Rsp_2eInstrument_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rsp_2eInstrument_2eproto;
namespace rsp {
class InstrumentField;
class InstrumentFieldDefaultTypeInternal;
extern InstrumentFieldDefaultTypeInternal _InstrumentField_default_instance_;
}  // namespace rsp
PROTOBUF_NAMESPACE_OPEN
template<> ::rsp::InstrumentField* Arena::CreateMaybeMessage<::rsp::InstrumentField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rsp {

// ===================================================================

class InstrumentField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsp.InstrumentField) */ {
 public:
  inline InstrumentField() : InstrumentField(nullptr) {}
  virtual ~InstrumentField();

  InstrumentField(const InstrumentField& from);
  InstrumentField(InstrumentField&& from) noexcept
    : InstrumentField() {
    *this = ::std::move(from);
  }

  inline InstrumentField& operator=(const InstrumentField& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentField& operator=(InstrumentField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentField* internal_default_instance() {
    return reinterpret_cast<const InstrumentField*>(
               &_InstrumentField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstrumentField& a, InstrumentField& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentField* New() const final {
    return CreateMaybeMessage<InstrumentField>(nullptr);
  }

  InstrumentField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentField& from);
  void MergeFrom(const InstrumentField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsp.InstrumentField";
  }
  protected:
  explicit InstrumentField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rsp_2eInstrument_2eproto);
    return ::descriptor_table_Rsp_2eInstrument_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 1,
    kExchangeIdFieldNumber = 2,
    kInstrumentNameFieldNumber = 3,
    kProductIdFieldNumber = 4,
    kCreateDateFieldNumber = 14,
    kOpenDateFieldNumber = 15,
    kExpireDateFieldNumber = 16,
    kStartDelivDateFieldNumber = 17,
    kEndDelivDateFieldNumber = 18,
    kProductClassFieldNumber = 5,
    kDeliveryYearFieldNumber = 6,
    kDeliveryMonthFieldNumber = 7,
    kMaxMarketOrderVolumeFieldNumber = 8,
    kMinMarketOrderVolumeFieldNumber = 9,
    kMaxLimitOrderVolumeFieldNumber = 10,
    kMinLimitOrderVolumeFieldNumber = 11,
    kVolumeMultipleFieldNumber = 12,
    kPriceTickFieldNumber = 13,
    kIsTradingFieldNumber = 19,
    kUnderlyingMultipleFieldNumber = 20,
  };
  // string instrument_id = 1;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_id = 2;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // bytes instrument_name = 3;
  void clear_instrument_name();
  const std::string& instrument_name() const;
  void set_instrument_name(const std::string& value);
  void set_instrument_name(std::string&& value);
  void set_instrument_name(const char* value);
  void set_instrument_name(const void* value, size_t size);
  std::string* mutable_instrument_name();
  std::string* release_instrument_name();
  void set_allocated_instrument_name(std::string* instrument_name);
  private:
  const std::string& _internal_instrument_name() const;
  void _internal_set_instrument_name(const std::string& value);
  std::string* _internal_mutable_instrument_name();
  public:

  // string product_id = 4;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // string create_date = 14;
  void clear_create_date();
  const std::string& create_date() const;
  void set_create_date(const std::string& value);
  void set_create_date(std::string&& value);
  void set_create_date(const char* value);
  void set_create_date(const char* value, size_t size);
  std::string* mutable_create_date();
  std::string* release_create_date();
  void set_allocated_create_date(std::string* create_date);
  private:
  const std::string& _internal_create_date() const;
  void _internal_set_create_date(const std::string& value);
  std::string* _internal_mutable_create_date();
  public:

  // string open_date = 15;
  void clear_open_date();
  const std::string& open_date() const;
  void set_open_date(const std::string& value);
  void set_open_date(std::string&& value);
  void set_open_date(const char* value);
  void set_open_date(const char* value, size_t size);
  std::string* mutable_open_date();
  std::string* release_open_date();
  void set_allocated_open_date(std::string* open_date);
  private:
  const std::string& _internal_open_date() const;
  void _internal_set_open_date(const std::string& value);
  std::string* _internal_mutable_open_date();
  public:

  // string expire_date = 16;
  void clear_expire_date();
  const std::string& expire_date() const;
  void set_expire_date(const std::string& value);
  void set_expire_date(std::string&& value);
  void set_expire_date(const char* value);
  void set_expire_date(const char* value, size_t size);
  std::string* mutable_expire_date();
  std::string* release_expire_date();
  void set_allocated_expire_date(std::string* expire_date);
  private:
  const std::string& _internal_expire_date() const;
  void _internal_set_expire_date(const std::string& value);
  std::string* _internal_mutable_expire_date();
  public:

  // string start_deliv_date = 17;
  void clear_start_deliv_date();
  const std::string& start_deliv_date() const;
  void set_start_deliv_date(const std::string& value);
  void set_start_deliv_date(std::string&& value);
  void set_start_deliv_date(const char* value);
  void set_start_deliv_date(const char* value, size_t size);
  std::string* mutable_start_deliv_date();
  std::string* release_start_deliv_date();
  void set_allocated_start_deliv_date(std::string* start_deliv_date);
  private:
  const std::string& _internal_start_deliv_date() const;
  void _internal_set_start_deliv_date(const std::string& value);
  std::string* _internal_mutable_start_deliv_date();
  public:

  // string end_deliv_date = 18;
  void clear_end_deliv_date();
  const std::string& end_deliv_date() const;
  void set_end_deliv_date(const std::string& value);
  void set_end_deliv_date(std::string&& value);
  void set_end_deliv_date(const char* value);
  void set_end_deliv_date(const char* value, size_t size);
  std::string* mutable_end_deliv_date();
  std::string* release_end_deliv_date();
  void set_allocated_end_deliv_date(std::string* end_deliv_date);
  private:
  const std::string& _internal_end_deliv_date() const;
  void _internal_set_end_deliv_date(const std::string& value);
  std::string* _internal_mutable_end_deliv_date();
  public:

  // int32 product_class = 5;
  void clear_product_class();
  ::PROTOBUF_NAMESPACE_ID::int32 product_class() const;
  void set_product_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_product_class() const;
  void _internal_set_product_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delivery_year = 6;
  void clear_delivery_year();
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_year() const;
  void set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delivery_year() const;
  void _internal_set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delivery_month = 7;
  void clear_delivery_month();
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_month() const;
  void set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delivery_month() const;
  void _internal_set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_market_order_volume = 8;
  void clear_max_market_order_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 max_market_order_volume() const;
  void set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_market_order_volume() const;
  void _internal_set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_market_order_volume = 9;
  void clear_min_market_order_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 min_market_order_volume() const;
  void set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_market_order_volume() const;
  void _internal_set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_limit_order_volume = 10;
  void clear_max_limit_order_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 max_limit_order_volume() const;
  void set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_limit_order_volume() const;
  void _internal_set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_limit_order_volume = 11;
  void clear_min_limit_order_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 min_limit_order_volume() const;
  void set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_limit_order_volume() const;
  void _internal_set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume_multiple = 12;
  void clear_volume_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple() const;
  void set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_multiple() const;
  void _internal_set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double price_tick = 13;
  void clear_price_tick();
  double price_tick() const;
  void set_price_tick(double value);
  private:
  double _internal_price_tick() const;
  void _internal_set_price_tick(double value);
  public:

  // bool is_trading = 19;
  void clear_is_trading();
  bool is_trading() const;
  void set_is_trading(bool value);
  private:
  bool _internal_is_trading() const;
  void _internal_set_is_trading(bool value);
  public:

  // int32 underlying_multiple = 20;
  void clear_underlying_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 underlying_multiple() const;
  void set_underlying_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_underlying_multiple() const;
  void _internal_set_underlying_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rsp.InstrumentField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expire_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_deliv_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_deliv_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 product_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_year_;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_month_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_market_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_market_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_limit_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_limit_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple_;
  double price_tick_;
  bool is_trading_;
  ::PROTOBUF_NAMESPACE_ID::int32 underlying_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rsp_2eInstrument_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstrumentField

// string instrument_id = 1;
inline void InstrumentField::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::instrument_id() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.instrument_id)
  return _internal_instrument_id();
}
inline void InstrumentField::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.instrument_id)
}
inline std::string* InstrumentField::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& InstrumentField::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void InstrumentField::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.instrument_id)
}
inline void InstrumentField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.instrument_id)
}
inline void InstrumentField::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.instrument_id)
}
inline std::string* InstrumentField::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.instrument_id)
}

// string exchange_id = 2;
inline void InstrumentField::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::exchange_id() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.exchange_id)
  return _internal_exchange_id();
}
inline void InstrumentField::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.exchange_id)
}
inline std::string* InstrumentField::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& InstrumentField::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void InstrumentField::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.exchange_id)
}
inline void InstrumentField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.exchange_id)
}
inline void InstrumentField::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.exchange_id)
}
inline std::string* InstrumentField::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.exchange_id)
}

// bytes instrument_name = 3;
inline void InstrumentField::clear_instrument_name() {
  instrument_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::instrument_name() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.instrument_name)
  return _internal_instrument_name();
}
inline void InstrumentField::set_instrument_name(const std::string& value) {
  _internal_set_instrument_name(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.instrument_name)
}
inline std::string* InstrumentField::mutable_instrument_name() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.instrument_name)
  return _internal_mutable_instrument_name();
}
inline const std::string& InstrumentField::_internal_instrument_name() const {
  return instrument_name_.Get();
}
inline void InstrumentField::_internal_set_instrument_name(const std::string& value) {
  
  instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_instrument_name(std::string&& value) {
  
  instrument_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.instrument_name)
}
inline void InstrumentField::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.instrument_name)
}
inline void InstrumentField::set_instrument_name(const void* value,
    size_t size) {
  
  instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.instrument_name)
}
inline std::string* InstrumentField::_internal_mutable_instrument_name() {
  
  return instrument_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_instrument_name() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.instrument_name)
  return instrument_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_instrument_name(std::string* instrument_name) {
  if (instrument_name != nullptr) {
    
  } else {
    
  }
  instrument_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.instrument_name)
}

// string product_id = 4;
inline void InstrumentField::clear_product_id() {
  product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::product_id() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.product_id)
  return _internal_product_id();
}
inline void InstrumentField::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.product_id)
}
inline std::string* InstrumentField::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& InstrumentField::_internal_product_id() const {
  return product_id_.Get();
}
inline void InstrumentField::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_product_id(std::string&& value) {
  
  product_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.product_id)
}
inline void InstrumentField::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.product_id)
}
inline void InstrumentField::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.product_id)
}
inline std::string* InstrumentField::_internal_mutable_product_id() {
  
  return product_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_product_id() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.product_id)
}

// int32 product_class = 5;
inline void InstrumentField::clear_product_class() {
  product_class_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_product_class() const {
  return product_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::product_class() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.product_class)
  return _internal_product_class();
}
inline void InstrumentField::_internal_set_product_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  product_class_ = value;
}
inline void InstrumentField::set_product_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_product_class(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.product_class)
}

// int32 delivery_year = 6;
inline void InstrumentField::clear_delivery_year() {
  delivery_year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_delivery_year() const {
  return delivery_year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::delivery_year() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.delivery_year)
  return _internal_delivery_year();
}
inline void InstrumentField::_internal_set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delivery_year_ = value;
}
inline void InstrumentField::set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delivery_year(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.delivery_year)
}

// int32 delivery_month = 7;
inline void InstrumentField::clear_delivery_month() {
  delivery_month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_delivery_month() const {
  return delivery_month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::delivery_month() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.delivery_month)
  return _internal_delivery_month();
}
inline void InstrumentField::_internal_set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delivery_month_ = value;
}
inline void InstrumentField::set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delivery_month(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.delivery_month)
}

// int32 max_market_order_volume = 8;
inline void InstrumentField::clear_max_market_order_volume() {
  max_market_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_max_market_order_volume() const {
  return max_market_order_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::max_market_order_volume() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.max_market_order_volume)
  return _internal_max_market_order_volume();
}
inline void InstrumentField::_internal_set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_market_order_volume_ = value;
}
inline void InstrumentField::set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_market_order_volume(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.max_market_order_volume)
}

// int32 min_market_order_volume = 9;
inline void InstrumentField::clear_min_market_order_volume() {
  min_market_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_min_market_order_volume() const {
  return min_market_order_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::min_market_order_volume() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.min_market_order_volume)
  return _internal_min_market_order_volume();
}
inline void InstrumentField::_internal_set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_market_order_volume_ = value;
}
inline void InstrumentField::set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_market_order_volume(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.min_market_order_volume)
}

// int32 max_limit_order_volume = 10;
inline void InstrumentField::clear_max_limit_order_volume() {
  max_limit_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_max_limit_order_volume() const {
  return max_limit_order_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::max_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.max_limit_order_volume)
  return _internal_max_limit_order_volume();
}
inline void InstrumentField::_internal_set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_limit_order_volume_ = value;
}
inline void InstrumentField::set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_limit_order_volume(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.max_limit_order_volume)
}

// int32 min_limit_order_volume = 11;
inline void InstrumentField::clear_min_limit_order_volume() {
  min_limit_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_min_limit_order_volume() const {
  return min_limit_order_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::min_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.min_limit_order_volume)
  return _internal_min_limit_order_volume();
}
inline void InstrumentField::_internal_set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_limit_order_volume_ = value;
}
inline void InstrumentField::set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_limit_order_volume(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.min_limit_order_volume)
}

// int32 volume_multiple = 12;
inline void InstrumentField::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_volume_multiple() const {
  return volume_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::volume_multiple() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.volume_multiple)
  return _internal_volume_multiple();
}
inline void InstrumentField::_internal_set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_multiple_ = value;
}
inline void InstrumentField::set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_multiple(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.volume_multiple)
}

// double price_tick = 13;
inline void InstrumentField::clear_price_tick() {
  price_tick_ = 0;
}
inline double InstrumentField::_internal_price_tick() const {
  return price_tick_;
}
inline double InstrumentField::price_tick() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.price_tick)
  return _internal_price_tick();
}
inline void InstrumentField::_internal_set_price_tick(double value) {
  
  price_tick_ = value;
}
inline void InstrumentField::set_price_tick(double value) {
  _internal_set_price_tick(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.price_tick)
}

// string create_date = 14;
inline void InstrumentField::clear_create_date() {
  create_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::create_date() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.create_date)
  return _internal_create_date();
}
inline void InstrumentField::set_create_date(const std::string& value) {
  _internal_set_create_date(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.create_date)
}
inline std::string* InstrumentField::mutable_create_date() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.create_date)
  return _internal_mutable_create_date();
}
inline const std::string& InstrumentField::_internal_create_date() const {
  return create_date_.Get();
}
inline void InstrumentField::_internal_set_create_date(const std::string& value) {
  
  create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_create_date(std::string&& value) {
  
  create_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.create_date)
}
inline void InstrumentField::set_create_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.create_date)
}
inline void InstrumentField::set_create_date(const char* value,
    size_t size) {
  
  create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.create_date)
}
inline std::string* InstrumentField::_internal_mutable_create_date() {
  
  return create_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_create_date() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.create_date)
  return create_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_create_date(std::string* create_date) {
  if (create_date != nullptr) {
    
  } else {
    
  }
  create_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.create_date)
}

// string open_date = 15;
inline void InstrumentField::clear_open_date() {
  open_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::open_date() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.open_date)
  return _internal_open_date();
}
inline void InstrumentField::set_open_date(const std::string& value) {
  _internal_set_open_date(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.open_date)
}
inline std::string* InstrumentField::mutable_open_date() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.open_date)
  return _internal_mutable_open_date();
}
inline const std::string& InstrumentField::_internal_open_date() const {
  return open_date_.Get();
}
inline void InstrumentField::_internal_set_open_date(const std::string& value) {
  
  open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_open_date(std::string&& value) {
  
  open_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.open_date)
}
inline void InstrumentField::set_open_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.open_date)
}
inline void InstrumentField::set_open_date(const char* value,
    size_t size) {
  
  open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.open_date)
}
inline std::string* InstrumentField::_internal_mutable_open_date() {
  
  return open_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_open_date() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.open_date)
  return open_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_open_date(std::string* open_date) {
  if (open_date != nullptr) {
    
  } else {
    
  }
  open_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.open_date)
}

// string expire_date = 16;
inline void InstrumentField::clear_expire_date() {
  expire_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::expire_date() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.expire_date)
  return _internal_expire_date();
}
inline void InstrumentField::set_expire_date(const std::string& value) {
  _internal_set_expire_date(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.expire_date)
}
inline std::string* InstrumentField::mutable_expire_date() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.expire_date)
  return _internal_mutable_expire_date();
}
inline const std::string& InstrumentField::_internal_expire_date() const {
  return expire_date_.Get();
}
inline void InstrumentField::_internal_set_expire_date(const std::string& value) {
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_expire_date(std::string&& value) {
  
  expire_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.expire_date)
}
inline void InstrumentField::set_expire_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.expire_date)
}
inline void InstrumentField::set_expire_date(const char* value,
    size_t size) {
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.expire_date)
}
inline std::string* InstrumentField::_internal_mutable_expire_date() {
  
  return expire_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_expire_date() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.expire_date)
  return expire_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_expire_date(std::string* expire_date) {
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expire_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.expire_date)
}

// string start_deliv_date = 17;
inline void InstrumentField::clear_start_deliv_date() {
  start_deliv_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::start_deliv_date() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.start_deliv_date)
  return _internal_start_deliv_date();
}
inline void InstrumentField::set_start_deliv_date(const std::string& value) {
  _internal_set_start_deliv_date(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.start_deliv_date)
}
inline std::string* InstrumentField::mutable_start_deliv_date() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.start_deliv_date)
  return _internal_mutable_start_deliv_date();
}
inline const std::string& InstrumentField::_internal_start_deliv_date() const {
  return start_deliv_date_.Get();
}
inline void InstrumentField::_internal_set_start_deliv_date(const std::string& value) {
  
  start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_start_deliv_date(std::string&& value) {
  
  start_deliv_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.start_deliv_date)
}
inline void InstrumentField::set_start_deliv_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.start_deliv_date)
}
inline void InstrumentField::set_start_deliv_date(const char* value,
    size_t size) {
  
  start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.start_deliv_date)
}
inline std::string* InstrumentField::_internal_mutable_start_deliv_date() {
  
  return start_deliv_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_start_deliv_date() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.start_deliv_date)
  return start_deliv_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_start_deliv_date(std::string* start_deliv_date) {
  if (start_deliv_date != nullptr) {
    
  } else {
    
  }
  start_deliv_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_deliv_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.start_deliv_date)
}

// string end_deliv_date = 18;
inline void InstrumentField::clear_end_deliv_date() {
  end_deliv_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentField::end_deliv_date() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.end_deliv_date)
  return _internal_end_deliv_date();
}
inline void InstrumentField::set_end_deliv_date(const std::string& value) {
  _internal_set_end_deliv_date(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.end_deliv_date)
}
inline std::string* InstrumentField::mutable_end_deliv_date() {
  // @@protoc_insertion_point(field_mutable:rsp.InstrumentField.end_deliv_date)
  return _internal_mutable_end_deliv_date();
}
inline const std::string& InstrumentField::_internal_end_deliv_date() const {
  return end_deliv_date_.Get();
}
inline void InstrumentField::_internal_set_end_deliv_date(const std::string& value) {
  
  end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentField::set_end_deliv_date(std::string&& value) {
  
  end_deliv_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsp.InstrumentField.end_deliv_date)
}
inline void InstrumentField::set_end_deliv_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsp.InstrumentField.end_deliv_date)
}
inline void InstrumentField::set_end_deliv_date(const char* value,
    size_t size) {
  
  end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsp.InstrumentField.end_deliv_date)
}
inline std::string* InstrumentField::_internal_mutable_end_deliv_date() {
  
  return end_deliv_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentField::release_end_deliv_date() {
  // @@protoc_insertion_point(field_release:rsp.InstrumentField.end_deliv_date)
  return end_deliv_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentField::set_allocated_end_deliv_date(std::string* end_deliv_date) {
  if (end_deliv_date != nullptr) {
    
  } else {
    
  }
  end_deliv_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_deliv_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsp.InstrumentField.end_deliv_date)
}

// bool is_trading = 19;
inline void InstrumentField::clear_is_trading() {
  is_trading_ = false;
}
inline bool InstrumentField::_internal_is_trading() const {
  return is_trading_;
}
inline bool InstrumentField::is_trading() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.is_trading)
  return _internal_is_trading();
}
inline void InstrumentField::_internal_set_is_trading(bool value) {
  
  is_trading_ = value;
}
inline void InstrumentField::set_is_trading(bool value) {
  _internal_set_is_trading(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.is_trading)
}

// int32 underlying_multiple = 20;
inline void InstrumentField::clear_underlying_multiple() {
  underlying_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::_internal_underlying_multiple() const {
  return underlying_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentField::underlying_multiple() const {
  // @@protoc_insertion_point(field_get:rsp.InstrumentField.underlying_multiple)
  return _internal_underlying_multiple();
}
inline void InstrumentField::_internal_set_underlying_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  underlying_multiple_ = value;
}
inline void InstrumentField::set_underlying_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_underlying_multiple(value);
  // @@protoc_insertion_point(field_set:rsp.InstrumentField.underlying_multiple)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rsp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Rsp_2eInstrument_2eproto

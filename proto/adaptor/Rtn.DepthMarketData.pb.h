// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rtn.DepthMarketData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Rtn_2eDepthMarketData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Rtn_2eDepthMarketData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Rtn_2eDepthMarketData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Rtn_2eDepthMarketData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rtn_2eDepthMarketData_2eproto;
namespace rtn {
class DepthMarketDataField;
class DepthMarketDataFieldDefaultTypeInternal;
extern DepthMarketDataFieldDefaultTypeInternal _DepthMarketDataField_default_instance_;
}  // namespace rtn
PROTOBUF_NAMESPACE_OPEN
template<> ::rtn::DepthMarketDataField* Arena::CreateMaybeMessage<::rtn::DepthMarketDataField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rtn {

// ===================================================================

class DepthMarketDataField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rtn.DepthMarketDataField) */ {
 public:
  inline DepthMarketDataField() : DepthMarketDataField(nullptr) {}
  virtual ~DepthMarketDataField();

  DepthMarketDataField(const DepthMarketDataField& from);
  DepthMarketDataField(DepthMarketDataField&& from) noexcept
    : DepthMarketDataField() {
    *this = ::std::move(from);
  }

  inline DepthMarketDataField& operator=(const DepthMarketDataField& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthMarketDataField& operator=(DepthMarketDataField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthMarketDataField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthMarketDataField* internal_default_instance() {
    return reinterpret_cast<const DepthMarketDataField*>(
               &_DepthMarketDataField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DepthMarketDataField& a, DepthMarketDataField& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthMarketDataField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthMarketDataField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthMarketDataField* New() const final {
    return CreateMaybeMessage<DepthMarketDataField>(nullptr);
  }

  DepthMarketDataField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthMarketDataField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthMarketDataField& from);
  void MergeFrom(const DepthMarketDataField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthMarketDataField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rtn.DepthMarketDataField";
  }
  protected:
  explicit DepthMarketDataField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rtn_2eDepthMarketData_2eproto);
    return ::descriptor_table_Rtn_2eDepthMarketData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingDayFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
    kExchangeIdFieldNumber = 3,
    kUpdateTimeFieldNumber = 18,
    kActionDayFieldNumber = 21,
    kLastPriceFieldNumber = 4,
    kPreSettlementPriceFieldNumber = 5,
    kPreClosePriceFieldNumber = 6,
    kOpenPriceFieldNumber = 8,
    kHighestPriceFieldNumber = 9,
    kPreOpenInterestFieldNumber = 7,
    kVolumeFieldNumber = 11,
    kLowestPriceFieldNumber = 10,
    kTurnOverFieldNumber = 12,
    kClosePriceFieldNumber = 14,
    kSettlementPriceFieldNumber = 15,
    kUpperLimitPriceFieldNumber = 16,
    kOpenInterestFieldNumber = 13,
    kUpdateMillisecFieldNumber = 19,
    kLowerLimitPriceFieldNumber = 17,
    kAveragePriceFieldNumber = 20,
    kBidPriceFieldNumber = 22,
    kAskPriceFieldNumber = 24,
    kBidVolumeFieldNumber = 23,
    kAskVolumeFieldNumber = 25,
  };
  // string trading_day = 1;
  void clear_trading_day();
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string instrument_id = 2;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_id = 3;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string update_time = 18;
  void clear_update_time();
  const std::string& update_time() const;
  void set_update_time(const std::string& value);
  void set_update_time(std::string&& value);
  void set_update_time(const char* value);
  void set_update_time(const char* value, size_t size);
  std::string* mutable_update_time();
  std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string action_day = 21;
  void clear_action_day();
  const std::string& action_day() const;
  void set_action_day(const std::string& value);
  void set_action_day(std::string&& value);
  void set_action_day(const char* value);
  void set_action_day(const char* value, size_t size);
  std::string* mutable_action_day();
  std::string* release_action_day();
  void set_allocated_action_day(std::string* action_day);
  private:
  const std::string& _internal_action_day() const;
  void _internal_set_action_day(const std::string& value);
  std::string* _internal_mutable_action_day();
  public:

  // double last_price = 4;
  void clear_last_price();
  double last_price() const;
  void set_last_price(double value);
  private:
  double _internal_last_price() const;
  void _internal_set_last_price(double value);
  public:

  // double pre_settlement_price = 5;
  void clear_pre_settlement_price();
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);
  private:
  double _internal_pre_settlement_price() const;
  void _internal_set_pre_settlement_price(double value);
  public:

  // double pre_close_price = 6;
  void clear_pre_close_price();
  double pre_close_price() const;
  void set_pre_close_price(double value);
  private:
  double _internal_pre_close_price() const;
  void _internal_set_pre_close_price(double value);
  public:

  // double open_price = 8;
  void clear_open_price();
  double open_price() const;
  void set_open_price(double value);
  private:
  double _internal_open_price() const;
  void _internal_set_open_price(double value);
  public:

  // double highest_price = 9;
  void clear_highest_price();
  double highest_price() const;
  void set_highest_price(double value);
  private:
  double _internal_highest_price() const;
  void _internal_set_highest_price(double value);
  public:

  // int32 pre_open_interest = 7;
  void clear_pre_open_interest();
  ::PROTOBUF_NAMESPACE_ID::int32 pre_open_interest() const;
  void set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pre_open_interest() const;
  void _internal_set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume = 11;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double lowest_price = 10;
  void clear_lowest_price();
  double lowest_price() const;
  void set_lowest_price(double value);
  private:
  double _internal_lowest_price() const;
  void _internal_set_lowest_price(double value);
  public:

  // double turn_over = 12;
  void clear_turn_over();
  double turn_over() const;
  void set_turn_over(double value);
  private:
  double _internal_turn_over() const;
  void _internal_set_turn_over(double value);
  public:

  // double close_price = 14;
  void clear_close_price();
  double close_price() const;
  void set_close_price(double value);
  private:
  double _internal_close_price() const;
  void _internal_set_close_price(double value);
  public:

  // double settlement_price = 15;
  void clear_settlement_price();
  double settlement_price() const;
  void set_settlement_price(double value);
  private:
  double _internal_settlement_price() const;
  void _internal_set_settlement_price(double value);
  public:

  // double upper_limit_price = 16;
  void clear_upper_limit_price();
  double upper_limit_price() const;
  void set_upper_limit_price(double value);
  private:
  double _internal_upper_limit_price() const;
  void _internal_set_upper_limit_price(double value);
  public:

  // int32 open_interest = 13;
  void clear_open_interest();
  ::PROTOBUF_NAMESPACE_ID::int32 open_interest() const;
  void set_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_open_interest() const;
  void _internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 update_millisec = 19;
  void clear_update_millisec();
  ::PROTOBUF_NAMESPACE_ID::int32 update_millisec() const;
  void set_update_millisec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_update_millisec() const;
  void _internal_set_update_millisec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double lower_limit_price = 17;
  void clear_lower_limit_price();
  double lower_limit_price() const;
  void set_lower_limit_price(double value);
  private:
  double _internal_lower_limit_price() const;
  void _internal_set_lower_limit_price(double value);
  public:

  // double average_price = 20;
  void clear_average_price();
  double average_price() const;
  void set_average_price(double value);
  private:
  double _internal_average_price() const;
  void _internal_set_average_price(double value);
  public:

  // double bid_price = 22;
  void clear_bid_price();
  double bid_price() const;
  void set_bid_price(double value);
  private:
  double _internal_bid_price() const;
  void _internal_set_bid_price(double value);
  public:

  // double ask_price = 24;
  void clear_ask_price();
  double ask_price() const;
  void set_ask_price(double value);
  private:
  double _internal_ask_price() const;
  void _internal_set_ask_price(double value);
  public:

  // int32 bid_volume = 23;
  void clear_bid_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume() const;
  void set_bid_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid_volume() const;
  void _internal_set_bid_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ask_volume = 25;
  void clear_ask_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume() const;
  void set_ask_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ask_volume() const;
  void _internal_set_ask_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rtn.DepthMarketDataField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_day_;
  double last_price_;
  double pre_settlement_price_;
  double pre_close_price_;
  double open_price_;
  double highest_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 pre_open_interest_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  double lowest_price_;
  double turn_over_;
  double close_price_;
  double settlement_price_;
  double upper_limit_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_interest_;
  ::PROTOBUF_NAMESPACE_ID::int32 update_millisec_;
  double lower_limit_price_;
  double average_price_;
  double bid_price_;
  double ask_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rtn_2eDepthMarketData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DepthMarketDataField

// string trading_day = 1;
inline void DepthMarketDataField::clear_trading_day() {
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthMarketDataField::trading_day() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.trading_day)
  return _internal_trading_day();
}
inline void DepthMarketDataField::set_trading_day(const std::string& value) {
  _internal_set_trading_day(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.trading_day)
}
inline std::string* DepthMarketDataField::mutable_trading_day() {
  // @@protoc_insertion_point(field_mutable:rtn.DepthMarketDataField.trading_day)
  return _internal_mutable_trading_day();
}
inline const std::string& DepthMarketDataField::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void DepthMarketDataField::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthMarketDataField::set_trading_day(std::string&& value) {
  
  trading_day_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.DepthMarketDataField.trading_day)
}
inline void DepthMarketDataField::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.DepthMarketDataField.trading_day)
}
inline void DepthMarketDataField::set_trading_day(const char* value,
    size_t size) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.DepthMarketDataField.trading_day)
}
inline std::string* DepthMarketDataField::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthMarketDataField::release_trading_day() {
  // @@protoc_insertion_point(field_release:rtn.DepthMarketDataField.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthMarketDataField::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.DepthMarketDataField.trading_day)
}

// string instrument_id = 2;
inline void DepthMarketDataField::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthMarketDataField::instrument_id() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.instrument_id)
  return _internal_instrument_id();
}
inline void DepthMarketDataField::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.instrument_id)
}
inline std::string* DepthMarketDataField::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:rtn.DepthMarketDataField.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& DepthMarketDataField::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void DepthMarketDataField::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthMarketDataField::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.DepthMarketDataField.instrument_id)
}
inline void DepthMarketDataField::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.DepthMarketDataField.instrument_id)
}
inline void DepthMarketDataField::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.DepthMarketDataField.instrument_id)
}
inline std::string* DepthMarketDataField::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthMarketDataField::release_instrument_id() {
  // @@protoc_insertion_point(field_release:rtn.DepthMarketDataField.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthMarketDataField::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.DepthMarketDataField.instrument_id)
}

// string exchange_id = 3;
inline void DepthMarketDataField::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthMarketDataField::exchange_id() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.exchange_id)
  return _internal_exchange_id();
}
inline void DepthMarketDataField::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.exchange_id)
}
inline std::string* DepthMarketDataField::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:rtn.DepthMarketDataField.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& DepthMarketDataField::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void DepthMarketDataField::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthMarketDataField::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.DepthMarketDataField.exchange_id)
}
inline void DepthMarketDataField::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.DepthMarketDataField.exchange_id)
}
inline void DepthMarketDataField::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.DepthMarketDataField.exchange_id)
}
inline std::string* DepthMarketDataField::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthMarketDataField::release_exchange_id() {
  // @@protoc_insertion_point(field_release:rtn.DepthMarketDataField.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthMarketDataField::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.DepthMarketDataField.exchange_id)
}

// double last_price = 4;
inline void DepthMarketDataField::clear_last_price() {
  last_price_ = 0;
}
inline double DepthMarketDataField::_internal_last_price() const {
  return last_price_;
}
inline double DepthMarketDataField::last_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.last_price)
  return _internal_last_price();
}
inline void DepthMarketDataField::_internal_set_last_price(double value) {
  
  last_price_ = value;
}
inline void DepthMarketDataField::set_last_price(double value) {
  _internal_set_last_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.last_price)
}

// double pre_settlement_price = 5;
inline void DepthMarketDataField::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double DepthMarketDataField::_internal_pre_settlement_price() const {
  return pre_settlement_price_;
}
inline double DepthMarketDataField::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.pre_settlement_price)
  return _internal_pre_settlement_price();
}
inline void DepthMarketDataField::_internal_set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
}
inline void DepthMarketDataField::set_pre_settlement_price(double value) {
  _internal_set_pre_settlement_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.pre_settlement_price)
}

// double pre_close_price = 6;
inline void DepthMarketDataField::clear_pre_close_price() {
  pre_close_price_ = 0;
}
inline double DepthMarketDataField::_internal_pre_close_price() const {
  return pre_close_price_;
}
inline double DepthMarketDataField::pre_close_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.pre_close_price)
  return _internal_pre_close_price();
}
inline void DepthMarketDataField::_internal_set_pre_close_price(double value) {
  
  pre_close_price_ = value;
}
inline void DepthMarketDataField::set_pre_close_price(double value) {
  _internal_set_pre_close_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.pre_close_price)
}

// int32 pre_open_interest = 7;
inline void DepthMarketDataField::clear_pre_open_interest() {
  pre_open_interest_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::_internal_pre_open_interest() const {
  return pre_open_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.pre_open_interest)
  return _internal_pre_open_interest();
}
inline void DepthMarketDataField::_internal_set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pre_open_interest_ = value;
}
inline void DepthMarketDataField::set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pre_open_interest(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.pre_open_interest)
}

// double open_price = 8;
inline void DepthMarketDataField::clear_open_price() {
  open_price_ = 0;
}
inline double DepthMarketDataField::_internal_open_price() const {
  return open_price_;
}
inline double DepthMarketDataField::open_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.open_price)
  return _internal_open_price();
}
inline void DepthMarketDataField::_internal_set_open_price(double value) {
  
  open_price_ = value;
}
inline void DepthMarketDataField::set_open_price(double value) {
  _internal_set_open_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.open_price)
}

// double highest_price = 9;
inline void DepthMarketDataField::clear_highest_price() {
  highest_price_ = 0;
}
inline double DepthMarketDataField::_internal_highest_price() const {
  return highest_price_;
}
inline double DepthMarketDataField::highest_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.highest_price)
  return _internal_highest_price();
}
inline void DepthMarketDataField::_internal_set_highest_price(double value) {
  
  highest_price_ = value;
}
inline void DepthMarketDataField::set_highest_price(double value) {
  _internal_set_highest_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.highest_price)
}

// double lowest_price = 10;
inline void DepthMarketDataField::clear_lowest_price() {
  lowest_price_ = 0;
}
inline double DepthMarketDataField::_internal_lowest_price() const {
  return lowest_price_;
}
inline double DepthMarketDataField::lowest_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.lowest_price)
  return _internal_lowest_price();
}
inline void DepthMarketDataField::_internal_set_lowest_price(double value) {
  
  lowest_price_ = value;
}
inline void DepthMarketDataField::set_lowest_price(double value) {
  _internal_set_lowest_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.lowest_price)
}

// int32 volume = 11;
inline void DepthMarketDataField::clear_volume() {
  volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::volume() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.volume)
  return _internal_volume();
}
inline void DepthMarketDataField::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_ = value;
}
inline void DepthMarketDataField::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.volume)
}

// double turn_over = 12;
inline void DepthMarketDataField::clear_turn_over() {
  turn_over_ = 0;
}
inline double DepthMarketDataField::_internal_turn_over() const {
  return turn_over_;
}
inline double DepthMarketDataField::turn_over() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.turn_over)
  return _internal_turn_over();
}
inline void DepthMarketDataField::_internal_set_turn_over(double value) {
  
  turn_over_ = value;
}
inline void DepthMarketDataField::set_turn_over(double value) {
  _internal_set_turn_over(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.turn_over)
}

// int32 open_interest = 13;
inline void DepthMarketDataField::clear_open_interest() {
  open_interest_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::_internal_open_interest() const {
  return open_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::open_interest() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.open_interest)
  return _internal_open_interest();
}
inline void DepthMarketDataField::_internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_interest_ = value;
}
inline void DepthMarketDataField::set_open_interest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.open_interest)
}

// double close_price = 14;
inline void DepthMarketDataField::clear_close_price() {
  close_price_ = 0;
}
inline double DepthMarketDataField::_internal_close_price() const {
  return close_price_;
}
inline double DepthMarketDataField::close_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.close_price)
  return _internal_close_price();
}
inline void DepthMarketDataField::_internal_set_close_price(double value) {
  
  close_price_ = value;
}
inline void DepthMarketDataField::set_close_price(double value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.close_price)
}

// double settlement_price = 15;
inline void DepthMarketDataField::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double DepthMarketDataField::_internal_settlement_price() const {
  return settlement_price_;
}
inline double DepthMarketDataField::settlement_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.settlement_price)
  return _internal_settlement_price();
}
inline void DepthMarketDataField::_internal_set_settlement_price(double value) {
  
  settlement_price_ = value;
}
inline void DepthMarketDataField::set_settlement_price(double value) {
  _internal_set_settlement_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.settlement_price)
}

// double upper_limit_price = 16;
inline void DepthMarketDataField::clear_upper_limit_price() {
  upper_limit_price_ = 0;
}
inline double DepthMarketDataField::_internal_upper_limit_price() const {
  return upper_limit_price_;
}
inline double DepthMarketDataField::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.upper_limit_price)
  return _internal_upper_limit_price();
}
inline void DepthMarketDataField::_internal_set_upper_limit_price(double value) {
  
  upper_limit_price_ = value;
}
inline void DepthMarketDataField::set_upper_limit_price(double value) {
  _internal_set_upper_limit_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.upper_limit_price)
}

// double lower_limit_price = 17;
inline void DepthMarketDataField::clear_lower_limit_price() {
  lower_limit_price_ = 0;
}
inline double DepthMarketDataField::_internal_lower_limit_price() const {
  return lower_limit_price_;
}
inline double DepthMarketDataField::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.lower_limit_price)
  return _internal_lower_limit_price();
}
inline void DepthMarketDataField::_internal_set_lower_limit_price(double value) {
  
  lower_limit_price_ = value;
}
inline void DepthMarketDataField::set_lower_limit_price(double value) {
  _internal_set_lower_limit_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.lower_limit_price)
}

// string update_time = 18;
inline void DepthMarketDataField::clear_update_time() {
  update_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthMarketDataField::update_time() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.update_time)
  return _internal_update_time();
}
inline void DepthMarketDataField::set_update_time(const std::string& value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.update_time)
}
inline std::string* DepthMarketDataField::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:rtn.DepthMarketDataField.update_time)
  return _internal_mutable_update_time();
}
inline const std::string& DepthMarketDataField::_internal_update_time() const {
  return update_time_.Get();
}
inline void DepthMarketDataField::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthMarketDataField::set_update_time(std::string&& value) {
  
  update_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.DepthMarketDataField.update_time)
}
inline void DepthMarketDataField::set_update_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.DepthMarketDataField.update_time)
}
inline void DepthMarketDataField::set_update_time(const char* value,
    size_t size) {
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.DepthMarketDataField.update_time)
}
inline std::string* DepthMarketDataField::_internal_mutable_update_time() {
  
  return update_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthMarketDataField::release_update_time() {
  // @@protoc_insertion_point(field_release:rtn.DepthMarketDataField.update_time)
  return update_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthMarketDataField::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.DepthMarketDataField.update_time)
}

// int32 update_millisec = 19;
inline void DepthMarketDataField::clear_update_millisec() {
  update_millisec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::_internal_update_millisec() const {
  return update_millisec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::update_millisec() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.update_millisec)
  return _internal_update_millisec();
}
inline void DepthMarketDataField::_internal_set_update_millisec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  update_millisec_ = value;
}
inline void DepthMarketDataField::set_update_millisec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_update_millisec(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.update_millisec)
}

// double average_price = 20;
inline void DepthMarketDataField::clear_average_price() {
  average_price_ = 0;
}
inline double DepthMarketDataField::_internal_average_price() const {
  return average_price_;
}
inline double DepthMarketDataField::average_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.average_price)
  return _internal_average_price();
}
inline void DepthMarketDataField::_internal_set_average_price(double value) {
  
  average_price_ = value;
}
inline void DepthMarketDataField::set_average_price(double value) {
  _internal_set_average_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.average_price)
}

// string action_day = 21;
inline void DepthMarketDataField::clear_action_day() {
  action_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthMarketDataField::action_day() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.action_day)
  return _internal_action_day();
}
inline void DepthMarketDataField::set_action_day(const std::string& value) {
  _internal_set_action_day(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.action_day)
}
inline std::string* DepthMarketDataField::mutable_action_day() {
  // @@protoc_insertion_point(field_mutable:rtn.DepthMarketDataField.action_day)
  return _internal_mutable_action_day();
}
inline const std::string& DepthMarketDataField::_internal_action_day() const {
  return action_day_.Get();
}
inline void DepthMarketDataField::_internal_set_action_day(const std::string& value) {
  
  action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthMarketDataField::set_action_day(std::string&& value) {
  
  action_day_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rtn.DepthMarketDataField.action_day)
}
inline void DepthMarketDataField::set_action_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rtn.DepthMarketDataField.action_day)
}
inline void DepthMarketDataField::set_action_day(const char* value,
    size_t size) {
  
  action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rtn.DepthMarketDataField.action_day)
}
inline std::string* DepthMarketDataField::_internal_mutable_action_day() {
  
  return action_day_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthMarketDataField::release_action_day() {
  // @@protoc_insertion_point(field_release:rtn.DepthMarketDataField.action_day)
  return action_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthMarketDataField::set_allocated_action_day(std::string* action_day) {
  if (action_day != nullptr) {
    
  } else {
    
  }
  action_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_day,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rtn.DepthMarketDataField.action_day)
}

// double bid_price = 22;
inline void DepthMarketDataField::clear_bid_price() {
  bid_price_ = 0;
}
inline double DepthMarketDataField::_internal_bid_price() const {
  return bid_price_;
}
inline double DepthMarketDataField::bid_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.bid_price)
  return _internal_bid_price();
}
inline void DepthMarketDataField::_internal_set_bid_price(double value) {
  
  bid_price_ = value;
}
inline void DepthMarketDataField::set_bid_price(double value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.bid_price)
}

// int32 bid_volume = 23;
inline void DepthMarketDataField::clear_bid_volume() {
  bid_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::_internal_bid_volume() const {
  return bid_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::bid_volume() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.bid_volume)
  return _internal_bid_volume();
}
inline void DepthMarketDataField::_internal_set_bid_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_volume_ = value;
}
inline void DepthMarketDataField::set_bid_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid_volume(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.bid_volume)
}

// double ask_price = 24;
inline void DepthMarketDataField::clear_ask_price() {
  ask_price_ = 0;
}
inline double DepthMarketDataField::_internal_ask_price() const {
  return ask_price_;
}
inline double DepthMarketDataField::ask_price() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.ask_price)
  return _internal_ask_price();
}
inline void DepthMarketDataField::_internal_set_ask_price(double value) {
  
  ask_price_ = value;
}
inline void DepthMarketDataField::set_ask_price(double value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.ask_price)
}

// int32 ask_volume = 25;
inline void DepthMarketDataField::clear_ask_volume() {
  ask_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::_internal_ask_volume() const {
  return ask_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepthMarketDataField::ask_volume() const {
  // @@protoc_insertion_point(field_get:rtn.DepthMarketDataField.ask_volume)
  return _internal_ask_volume();
}
inline void DepthMarketDataField::_internal_set_ask_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ask_volume_ = value;
}
inline void DepthMarketDataField::set_ask_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ask_volume(value);
  // @@protoc_insertion_point(field_set:rtn.DepthMarketDataField.ask_volume)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rtn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Rtn_2eDepthMarketData_2eproto

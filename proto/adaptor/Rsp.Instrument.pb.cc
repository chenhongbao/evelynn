// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rsp.Instrument.proto

#include "Rsp.Instrument.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rsp {
class InstrumentFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentField> _instance;
} _InstrumentField_default_instance_;
}  // namespace rsp
static void InitDefaultsscc_info_InstrumentField_Rsp_2eInstrument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rsp::_InstrumentField_default_instance_;
    new (ptr) ::rsp::InstrumentField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsp::InstrumentField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentField_Rsp_2eInstrument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstrumentField_Rsp_2eInstrument_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Rsp_2eInstrument_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Rsp_2eInstrument_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Rsp_2eInstrument_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Rsp_2eInstrument_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, instrument_name_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, product_id_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, product_class_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, delivery_year_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, delivery_month_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, max_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, min_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, max_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, min_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, price_tick_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, create_date_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, open_date_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, expire_date_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, start_deliv_date_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, end_deliv_date_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, is_trading_),
  PROTOBUF_FIELD_OFFSET(::rsp::InstrumentField, underlying_multiple_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rsp::InstrumentField)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rsp::_InstrumentField_default_instance_),
};

const char descriptor_table_protodef_Rsp_2eInstrument_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024Rsp.Instrument.proto\022\003rsp\"\377\003\n\017Instrume"
  "ntField\022\025\n\rinstrument_id\030\001 \001(\t\022\023\n\013exchan"
  "ge_id\030\002 \001(\t\022\027\n\017instrument_name\030\003 \001(\014\022\022\n\n"
  "product_id\030\004 \001(\t\022\025\n\rproduct_class\030\005 \001(\005\022"
  "\025\n\rdelivery_year\030\006 \001(\005\022\026\n\016delivery_month"
  "\030\007 \001(\005\022\037\n\027max_market_order_volume\030\010 \001(\005\022"
  "\037\n\027min_market_order_volume\030\t \001(\005\022\036\n\026max_"
  "limit_order_volume\030\n \001(\005\022\036\n\026min_limit_or"
  "der_volume\030\013 \001(\005\022\027\n\017volume_multiple\030\014 \001("
  "\005\022\022\n\nprice_tick\030\r \001(\001\022\023\n\013create_date\030\016 \001"
  "(\t\022\021\n\topen_date\030\017 \001(\t\022\023\n\013expire_date\030\020 \001"
  "(\t\022\030\n\020start_deliv_date\030\021 \001(\t\022\026\n\016end_deli"
  "v_date\030\022 \001(\t\022\022\n\nis_trading\030\023 \001(\010\022\033\n\023unde"
  "rlying_multiple\030\024 \001(\005BB\n\025io.evelynn.base"
  ".protoB\024InstrumentFieldProto\252\002\022Evelynn.B"
  "ase.Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Rsp_2eInstrument_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Rsp_2eInstrument_2eproto_sccs[1] = {
  &scc_info_InstrumentField_Rsp_2eInstrument_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Rsp_2eInstrument_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rsp_2eInstrument_2eproto = {
  false, false, descriptor_table_protodef_Rsp_2eInstrument_2eproto, "Rsp.Instrument.proto", 617,
  &descriptor_table_Rsp_2eInstrument_2eproto_once, descriptor_table_Rsp_2eInstrument_2eproto_sccs, descriptor_table_Rsp_2eInstrument_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_Rsp_2eInstrument_2eproto::offsets,
  file_level_metadata_Rsp_2eInstrument_2eproto, 1, file_level_enum_descriptors_Rsp_2eInstrument_2eproto, file_level_service_descriptors_Rsp_2eInstrument_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Rsp_2eInstrument_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Rsp_2eInstrument_2eproto)), true);
namespace rsp {

// ===================================================================

void InstrumentField::InitAsDefaultInstance() {
}
class InstrumentField::_Internal {
 public:
};

InstrumentField::InstrumentField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rsp.InstrumentField)
}
InstrumentField::InstrumentField(const InstrumentField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  instrument_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_name().empty()) {
    instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_name(),
      GetArena());
  }
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_id(),
      GetArena());
  }
  create_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_date().empty()) {
    create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_create_date(),
      GetArena());
  }
  open_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_open_date().empty()) {
    open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_open_date(),
      GetArena());
  }
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expire_date().empty()) {
    expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expire_date(),
      GetArena());
  }
  start_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_deliv_date().empty()) {
    start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_deliv_date(),
      GetArena());
  }
  end_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_deliv_date().empty()) {
    end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_deliv_date(),
      GetArena());
  }
  ::memcpy(&product_class_, &from.product_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&underlying_multiple_) -
    reinterpret_cast<char*>(&product_class_)) + sizeof(underlying_multiple_));
  // @@protoc_insertion_point(copy_constructor:rsp.InstrumentField)
}

void InstrumentField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentField_Rsp_2eInstrument_2eproto.base);
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&product_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlying_multiple_) -
      reinterpret_cast<char*>(&product_class_)) + sizeof(underlying_multiple_));
}

InstrumentField::~InstrumentField() {
  // @@protoc_insertion_point(destructor:rsp.InstrumentField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_deliv_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_deliv_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentField::ArenaDtor(void* object) {
  InstrumentField* _this = reinterpret_cast< InstrumentField* >(object);
  (void)_this;
}
void InstrumentField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentField& InstrumentField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentField_Rsp_2eInstrument_2eproto.base);
  return *internal_default_instance();
}


void InstrumentField::Clear() {
// @@protoc_insertion_point(message_clear_start:rsp.InstrumentField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  open_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expire_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_deliv_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_deliv_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&product_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlying_multiple_) -
      reinterpret_cast<char*>(&product_class_)) + sizeof(underlying_multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.InstrumentField.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.InstrumentField.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes instrument_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrument_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.InstrumentField.product_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 product_class = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          product_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delivery_year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          delivery_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delivery_month = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          delivery_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_market_order_volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_market_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_market_order_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          min_market_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_limit_order_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          max_limit_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_limit_order_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          min_limit_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume_multiple = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          volume_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price_tick = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          price_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string create_date = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_create_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.InstrumentField.create_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string open_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_open_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.InstrumentField.open_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expire_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_expire_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.InstrumentField.expire_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start_deliv_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_start_deliv_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.InstrumentField.start_deliv_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_deliv_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_end_deliv_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rsp.InstrumentField.end_deliv_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_trading = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          is_trading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 underlying_multiple = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          underlying_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsp.InstrumentField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.InstrumentField.instrument_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument_id(), target);
  }

  // string exchange_id = 2;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.InstrumentField.exchange_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchange_id(), target);
  }

  // bytes instrument_name = 3;
  if (this->instrument_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_instrument_name(), target);
  }

  // string product_id = 4;
  if (this->product_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.InstrumentField.product_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_product_id(), target);
  }

  // int32 product_class = 5;
  if (this->product_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_product_class(), target);
  }

  // int32 delivery_year = 6;
  if (this->delivery_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_delivery_year(), target);
  }

  // int32 delivery_month = 7;
  if (this->delivery_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_delivery_month(), target);
  }

  // int32 max_market_order_volume = 8;
  if (this->max_market_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_market_order_volume(), target);
  }

  // int32 min_market_order_volume = 9;
  if (this->min_market_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_min_market_order_volume(), target);
  }

  // int32 max_limit_order_volume = 10;
  if (this->max_limit_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_max_limit_order_volume(), target);
  }

  // int32 min_limit_order_volume = 11;
  if (this->min_limit_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_min_limit_order_volume(), target);
  }

  // int32 volume_multiple = 12;
  if (this->volume_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_volume_multiple(), target);
  }

  // double price_tick = 13;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_price_tick(), target);
  }

  // string create_date = 14;
  if (this->create_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_date().data(), static_cast<int>(this->_internal_create_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.InstrumentField.create_date");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_create_date(), target);
  }

  // string open_date = 15;
  if (this->open_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_date().data(), static_cast<int>(this->_internal_open_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.InstrumentField.open_date");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_open_date(), target);
  }

  // string expire_date = 16;
  if (this->expire_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expire_date().data(), static_cast<int>(this->_internal_expire_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.InstrumentField.expire_date");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_expire_date(), target);
  }

  // string start_deliv_date = 17;
  if (this->start_deliv_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_deliv_date().data(), static_cast<int>(this->_internal_start_deliv_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.InstrumentField.start_deliv_date");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_start_deliv_date(), target);
  }

  // string end_deliv_date = 18;
  if (this->end_deliv_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_deliv_date().data(), static_cast<int>(this->_internal_end_deliv_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rsp.InstrumentField.end_deliv_date");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_end_deliv_date(), target);
  }

  // bool is_trading = 19;
  if (this->is_trading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_trading(), target);
  }

  // int32 underlying_multiple = 20;
  if (this->underlying_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_underlying_multiple(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsp.InstrumentField)
  return target;
}

size_t InstrumentField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsp.InstrumentField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string exchange_id = 2;
  if (this->exchange_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // bytes instrument_name = 3;
  if (this->instrument_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrument_name());
  }

  // string product_id = 4;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_id());
  }

  // string create_date = 14;
  if (this->create_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_date());
  }

  // string open_date = 15;
  if (this->open_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_date());
  }

  // string expire_date = 16;
  if (this->expire_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expire_date());
  }

  // string start_deliv_date = 17;
  if (this->start_deliv_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_deliv_date());
  }

  // string end_deliv_date = 18;
  if (this->end_deliv_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_deliv_date());
  }

  // int32 product_class = 5;
  if (this->product_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_product_class());
  }

  // int32 delivery_year = 6;
  if (this->delivery_year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delivery_year());
  }

  // int32 delivery_month = 7;
  if (this->delivery_month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delivery_month());
  }

  // int32 max_market_order_volume = 8;
  if (this->max_market_order_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_market_order_volume());
  }

  // int32 min_market_order_volume = 9;
  if (this->min_market_order_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_market_order_volume());
  }

  // int32 max_limit_order_volume = 10;
  if (this->max_limit_order_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_limit_order_volume());
  }

  // int32 min_limit_order_volume = 11;
  if (this->min_limit_order_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_limit_order_volume());
  }

  // int32 volume_multiple = 12;
  if (this->volume_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume_multiple());
  }

  // double price_tick = 13;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_trading = 19;
  if (this->is_trading() != 0) {
    total_size += 2 + 1;
  }

  // int32 underlying_multiple = 20;
  if (this->underlying_multiple() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_underlying_multiple());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsp.InstrumentField)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsp.InstrumentField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsp.InstrumentField)
    MergeFrom(*source);
  }
}

void InstrumentField::MergeFrom(const InstrumentField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsp.InstrumentField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.instrument_name().size() > 0) {
    _internal_set_instrument_name(from._internal_instrument_name());
  }
  if (from.product_id().size() > 0) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (from.create_date().size() > 0) {
    _internal_set_create_date(from._internal_create_date());
  }
  if (from.open_date().size() > 0) {
    _internal_set_open_date(from._internal_open_date());
  }
  if (from.expire_date().size() > 0) {
    _internal_set_expire_date(from._internal_expire_date());
  }
  if (from.start_deliv_date().size() > 0) {
    _internal_set_start_deliv_date(from._internal_start_deliv_date());
  }
  if (from.end_deliv_date().size() > 0) {
    _internal_set_end_deliv_date(from._internal_end_deliv_date());
  }
  if (from.product_class() != 0) {
    _internal_set_product_class(from._internal_product_class());
  }
  if (from.delivery_year() != 0) {
    _internal_set_delivery_year(from._internal_delivery_year());
  }
  if (from.delivery_month() != 0) {
    _internal_set_delivery_month(from._internal_delivery_month());
  }
  if (from.max_market_order_volume() != 0) {
    _internal_set_max_market_order_volume(from._internal_max_market_order_volume());
  }
  if (from.min_market_order_volume() != 0) {
    _internal_set_min_market_order_volume(from._internal_min_market_order_volume());
  }
  if (from.max_limit_order_volume() != 0) {
    _internal_set_max_limit_order_volume(from._internal_max_limit_order_volume());
  }
  if (from.min_limit_order_volume() != 0) {
    _internal_set_min_limit_order_volume(from._internal_min_limit_order_volume());
  }
  if (from.volume_multiple() != 0) {
    _internal_set_volume_multiple(from._internal_volume_multiple());
  }
  if (!(from.price_tick() <= 0 && from.price_tick() >= 0)) {
    _internal_set_price_tick(from._internal_price_tick());
  }
  if (from.is_trading() != 0) {
    _internal_set_is_trading(from._internal_is_trading());
  }
  if (from.underlying_multiple() != 0) {
    _internal_set_underlying_multiple(from._internal_underlying_multiple());
  }
}

void InstrumentField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsp.InstrumentField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentField::CopyFrom(const InstrumentField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsp.InstrumentField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentField::IsInitialized() const {
  return true;
}

void InstrumentField::InternalSwap(InstrumentField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_name_.Swap(&other->instrument_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_id_.Swap(&other->product_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_date_.Swap(&other->create_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  open_date_.Swap(&other->open_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expire_date_.Swap(&other->expire_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_deliv_date_.Swap(&other->start_deliv_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_deliv_date_.Swap(&other->end_deliv_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentField, underlying_multiple_)
      + sizeof(InstrumentField::underlying_multiple_)
      - PROTOBUF_FIELD_OFFSET(InstrumentField, product_class_)>(
          reinterpret_cast<char*>(&product_class_),
          reinterpret_cast<char*>(&other->product_class_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentField::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rsp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rsp::InstrumentField* Arena::CreateMaybeMessage< ::rsp::InstrumentField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsp::InstrumentField >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
